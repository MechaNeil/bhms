{"version":3,"file":"overlayscrollbars.browser.es5.js","sources":["../../src/support/cache.ts","../../src/support/compatibility/isBrowser.ts","../../src/support/utils/alias.ts","../../src/support/compatibility/apis.ts","../../src/support/utils/types.ts","../../src/support/utils/animation.ts","../../src/support/utils/array.ts","../../src/support/utils/strings.ts","../../src/support/utils/equal.ts","../../src/support/utils/noop.ts","../../src/support/utils/function.ts","../../src/support/utils/object.ts","../../src/support/utils/math.ts","../../src/support/dom/attribute.ts","../../src/support/dom/class.ts","../../src/support/dom/traversal.ts","../../src/support/dom/manipulation.ts","../../src/support/dom/create.ts","../../src/support/dom/style.ts","../../src/support/dom/dimensions.ts","../../src/support/dom/events.ts","../../src/support/dom/scroll.ts","../../src/support/dom/focus.ts","../../src/support/eventListeners.ts","../../src/options.ts","../../src/classnames.ts","../../src/nonce.ts","../../src/environment.ts","../../src/initialization.ts","../../src/instances.ts","../../src/observers/domObserver.ts","../../src/plugins/plugins.ts","../../../../node_modules/@babel/runtime/helpers/extends.js","../../src/plugins/optionsValidationPlugin/validation.ts","../../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../../src/setups/structureSetup/structureSetup.utils.ts","../../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../../src/plugins/clickScrollPlugin/clickScrollPlugin.ts","../../src/observers/sizeObserver.ts","../../src/observers/trinsicObserver.ts","../../src/setups/observersSetup/observersSetup.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../../src/setups/structureSetup/structureSetup.elements.ts","../../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../../src/setups/structureSetup/structureSetup.ts","../../src/setups/setups.ts","../../src/overlayscrollbars.ts"],"sourcesContent":["export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n","export const isBrowser =\r\n  // deno has the global `window` defined\r\n  typeof window !== 'undefined' &&\r\n  // make sure HTML element is available\r\n  typeof HTMLElement !== 'undefined' &&\r\n  // make sure document is defined\r\n  !!window.document;\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const mathSign = Math.sign;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n","import { wnd } from '../utils/alias';\r\n\r\nconst getApi = <T>(name: string) =>\r\n  (typeof wnd[name as keyof typeof wnd] !== 'undefined'\r\n    ? wnd[name as keyof typeof wnd]\r\n    : undefined) as T;\r\n\r\nexport const MutationObserverConstructor = getApi<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  getApi<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = getApi<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = getApi<new (constructor: unknown) => AnimationTimeline>('ScrollTimeline');\r\n","import type { PlainObject } from '~/typings';\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : Object.prototype.toString\r\n        .call(obj)\r\n        .replace(/^\\[object (.+)\\]$/, '$1')\r\n        .toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> =>\r\n  !!obj && obj.constructor === Object;\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => obj instanceof HTMLElement;\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => obj instanceof Element;\r\n","import { mathMax, rAF, cAF } from './alias';\r\nimport { isFunction } from './types';\r\n\r\n/**\r\n * percent: current percent (0 - 1),\r\n * time: current time (duration * percent),\r\n * min: start value\r\n * max: end value\r\n * duration: duration in ms\r\n */\r\nexport type EasingFn = (\r\n  percent: number,\r\n  time: number,\r\n  min: number,\r\n  max: number,\r\n  duration: number\r\n) => number;\r\n\r\nconst animationCurrentTime = () => performance.now();\r\n\r\nexport const animateNumber = (\r\n  from: number,\r\n  to: number,\r\n  duration: number,\r\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\r\n  easing?: EasingFn | false\r\n): ((complete?: boolean) => void) => {\r\n  let animationFrameId = 0;\r\n  const timeStart = animationCurrentTime();\r\n  const finalDuration = mathMax(0, duration);\r\n  const frame = (complete?: boolean) => {\r\n    const timeNow = animationCurrentTime();\r\n    const timeElapsed = timeNow - timeStart;\r\n    const stopAnimation = timeElapsed >= finalDuration;\r\n    const percent = complete\r\n      ? 1\r\n      : 1 - (mathMax(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\r\n    const progress =\r\n      (to - from) *\r\n        (isFunction(easing)\r\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\r\n          : percent) +\r\n      from;\r\n    const animationCompleted = stopAnimation || percent === 1;\r\n\r\n    onFrame && onFrame(progress, percent, animationCompleted);\r\n\r\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\r\n  };\r\n  frame();\r\n  return (complete) => {\r\n    cAF!(animationFrameId);\r\n    complete && frame(complete);\r\n  };\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | false | null | undefined;\r\n\r\nexport function each<T extends Array<unknown> | ReadonlyArray<unknown>>(\r\n  array: T,\r\n  callback: (\r\n    value: T extends Array<infer V> | ReadonlyArray<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends ArrayLike<unknown>>(\r\n  arrayLikeObject: T,\r\n  callback: (\r\n    value: T extends ArrayLike<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, key: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each(\r\n  source: Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | PlainObject,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | Set<unknown> | PlainObject {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[] | readonly T[], item: T): boolean =>\r\n  arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => Array.from(arr || []);\r\n\r\n/**\r\n * Creates an array if the passed value is not an array, or returns the value if it is.\r\n * If the passed value is an array like structure and not a string it will be converted into an array.\r\n * @param value The value.\r\n * @returns An array which represents the passed value(s).\r\n */\r\nexport const createOrKeepArray = <T>(value: T | T[] | ArrayLike<T>): T[] => {\r\n  if (isArray(value)) {\r\n    return value;\r\n  }\r\n  return !isString(value) && isArrayLike(value) ? from(value) : [value];\r\n};\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => (fn ? fn.apply(undefined, args || []) : true); // return true when fn is falsy to not break the loop\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strVisible = 'visible';\r\nexport const strHidden = 'hidden';\r\nexport const strScroll = 'scroll';\r\n\r\nexport const capitalizeFirstLetter = (str: string | number | false | null | undefined): string => {\r\n  const finalStr = String(str || '');\r\n  return finalStr ? finalStr[0].toUpperCase() + finalStr.slice(1) : '';\r\n};\r\n","import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '~/typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T> | ReadonlyArray<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: Partial<WH<T>>, b?: Partial<WH<T>>) =>\r\n  equal<Partial<WH<T>>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: Partial<XY<T>>, b?: Partial<XY<T>>) =>\r\n  equal<Partial<XY<T>>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n","export const noop = () => {}; // eslint-disable-line\r\n","import { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\nimport { noop } from './noop';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Defines the calling on the leading edge of the timeout.\r\n   */\r\n  _leading?: boolean;\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(() => callback(), isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  const { _timeout, _maxDelay, _leading, _mergeParams } = options || {};\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let leadingInvoked: boolean | undefined;\r\n  let clear = noop;\r\n\r\n  const invokeFunctionToDebounce = function (args: Parameters<FunctionToDebounce>) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    leadingInvoked = maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n      let timeoutId: number | undefined;\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      if (_leading && !leadingInvoked) {\r\n        boundInvoke();\r\n        leadingInvoked = true;\r\n        // @ts-ignore\r\n        timeoutId = setTimeoutFn(() => (leadingInvoked = undefined), finalTimeout);\r\n      } else {\r\n        // @ts-ignore\r\n        timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n\r\n        if (hasMaxWait && !maxTimeoutId) {\r\n          maxTimeoutId = setT(flush, finalMaxWait as number);\r\n        }\r\n      }\r\n\r\n      clear = () => clearTimeoutFn(timeoutId as number);\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => !keys(obj).length;\r\n","import { mathMax, mathMin } from './alias';\r\n\r\n/**\r\n * Caps the passed number between the `min` and `max` bounds.\r\n * @param min The min bound.\r\n * @param max The max bound.\r\n * @param number The number to be capped.\r\n * @returns The capped number between min and max.\r\n */\r\nexport const capNumber = (min: number, max: number, number: number) =>\r\n  mathMax(min, mathMin(max, number));\r\n","import type { HTMLElementTarget } from './types';\r\nimport { bind, deduplicateArray, each, from, isArray } from '../utils';\r\n\r\nexport type AttributeElementTarget = HTMLElementTarget | Element;\r\n\r\nexport type DomTokens = string | string[] | false | null | undefined | void;\r\n\r\nexport const getDomTokensArray = (tokens: DomTokens) =>\r\n  deduplicateArray((isArray(tokens) ? tokens : (tokens || '').split(' ')).filter((token) => token));\r\n\r\n/**\r\n * Gets a attribute with the given attribute of the given element.\r\n * @param elm The element of which the attribute shall be get.\r\n * @param attrName The attribute name which shall be get.\r\n * @returns The attribute value or `null` when the attribute is not set or `false` if the element is undefined.\r\n */\r\nexport const getAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.getAttribute(attrName);\r\n\r\n/**\r\n * Returns whether the given attribute exists on the given element.\r\n * @param elm The element.\r\n * @param attrName The attribute.\r\n * @returns A Truthy value indicates a present attrubte.\r\n */\r\nexport const hasAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.hasAttribute(attrName);\r\n\r\n/**\r\n * Sets the given attributes to the given element.\r\n * @param elm The element of which the attributes shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const setAttrs = (\r\n  elm: AttributeElementTarget,\r\n  attrNames: string | string[],\r\n  value: string | number | false | null | undefined\r\n) => {\r\n  each(getDomTokensArray(attrNames), (attrName) => {\r\n    elm && elm.setAttribute(attrName, String(value || ''));\r\n  });\r\n};\r\n\r\n/**\r\n * Removes the given attributes from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const removeAttrs = (elm: AttributeElementTarget, attrNames: string | string[]): void => {\r\n  each(getDomTokensArray(attrNames), (attrName) => elm && elm.removeAttribute(attrName));\r\n};\r\n\r\nexport const domTokenListAttr = (elm: AttributeElementTarget, attrName: string) => {\r\n  const initialArr = getDomTokensArray(getAttr(elm, attrName));\r\n  const setElmAttr = bind(setAttrs, elm, attrName);\r\n  const domTokenListOperation = (operationTokens: DomTokens, operation: 'add' | 'delete') => {\r\n    const initialArrSet = new Set(initialArr);\r\n    each(getDomTokensArray(operationTokens), (token) => {\r\n      initialArrSet[operation](token);\r\n    });\r\n    return from(initialArrSet).join(' ');\r\n  };\r\n\r\n  return {\r\n    _remove: (removeTokens: DomTokens) => setElmAttr(domTokenListOperation(removeTokens, 'delete')),\r\n    _add: (addTokens: DomTokens) => setElmAttr(domTokenListOperation(addTokens, 'add')),\r\n    _has: (hasTokens: DomTokens) => {\r\n      const tokenSet = getDomTokensArray(hasTokens);\r\n      return tokenSet.reduce(\r\n        (boolean, token) => boolean && initialArr.includes(token),\r\n        tokenSet.length > 0\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be removed.\r\n * @param value The value which shall be removed.\r\n */\r\nexport const removeAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._remove(value);\r\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n  return bind(addAttrClass, elm, attrName, value);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds value to it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added.\r\n * @param value The value which shall be added.\r\n */\r\nexport const addAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._add(value);\r\n  return bind(removeAttrClass, elm, attrName, value);\r\n};\r\n\r\nexport const addRemoveAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens,\r\n  add?: boolean\r\n) => (add ? addAttrClass : removeAttrClass)(elm, attrName, value);\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): boolean => domTokenListAttr(elm, attrName)._has(value);\r\n","import type { AttributeElementTarget, DomTokens } from './attribute';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { domTokenListAttr } from './attribute';\r\n\r\nconst createDomTokenListClass = (elm: AttributeElementTarget) => domTokenListAttr(elm, 'class');\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: AttributeElementTarget, className: DomTokens): boolean =>\r\n  createDomTokenListClass(elm)._has(className);\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: AttributeElementTarget, className: DomTokens): void => {\r\n  createDomTokenListClass(elm)._remove(className);\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: AttributeElementTarget, className: DomTokens): (() => void) => {\r\n  createDomTokenListClass(elm)._add(className);\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (\r\n  classNameA: string | false | null | undefined,\r\n  classNameB: string | false | null | undefined\r\n) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set.has(className) ? set.delete(className) : set.add(className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n","import type { NodeElementTarget } from './types';\r\nimport { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nexport const find = (selector: string, elm?: NodeElementTarget): Element[] => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n  return rootElm ? from(rootElm.querySelectorAll(selector)) : [];\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nexport const findFirst = (selector: string, elm?: NodeElementTarget): NodeElementTarget => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n  return rootElm && rootElm.querySelector(selector);\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nexport const is = (elm: NodeElementTarget, selector: string): boolean =>\r\n  isElement(elm) && elm.matches(selector);\r\n\r\nexport const isBodyElement = (elm: NodeElementTarget) => is(elm, 'body'); // don't do targetElement === ownerDocument.body in case initialization happens in memory\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nexport const children = (elm: NodeElementTarget, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nexport const contents = (elm: NodeElementTarget): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nexport const parent = (elm: NodeElementTarget): NodeElementTarget => elm && elm.parentElement;\r\n\r\n/**\r\n * Returns the closest element to the passed element which matches the given selector.\r\n * @param elm The element.\r\n * @param selector The selector.\r\n * @returns The closest element to the passed element which matches the given selector.\r\n */\r\nexport const closest = (elm: NodeElementTarget, selector: string): NodeElementTarget =>\r\n  isElement(elm) && elm.closest(selector);\r\n\r\n/**\r\n * Gets the focused element of the passed or default document.\r\n * @returns The focused element of the passed document.\r\n */\r\nexport const getFocusedElement = (doc?: Document) => (doc || document).activeElement;\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nexport const liesBetween = (\r\n  elm: NodeElementTarget,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n","import type { NodeElementTarget, NodeElementTargetCollection } from './types';\r\nimport { createOrKeepArray, each } from '../utils/array';\r\nimport { parent } from './traversal';\r\nimport { bind } from '../utils';\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeElementTargetCollection): void => {\r\n  each(createOrKeepArray(nodes), (node) => {\r\n    const parentElm = parent(node);\r\n    node && parentElm && parentElm.removeChild(node);\r\n  });\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: NodeElementTarget, children: NodeElementTargetCollection) =>\r\n  bind(\r\n    removeElements,\r\n    node &&\r\n      children &&\r\n      each(createOrKeepArray(children), (child) => {\r\n        child && node.appendChild(child);\r\n      })\r\n  );\r\n","import { each } from '../utils/array';\r\nimport { setAttrs } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  setAttrs(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import type { PlainObject, StyleObject, StyleObjectKey, StyleObjectValue } from '~/typings';\r\nimport type { XY } from './offset';\r\nimport type { HTMLElementTarget } from './types';\r\nimport { wnd } from '../utils/alias';\r\nimport { each, from } from '../utils/array';\r\nimport { isString, isNumber, isObject, isNull, isBoolean } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst getCSSVal = (computedStyle: CSSStyleDeclaration, prop: StyleObjectKey): string =>\r\n  computedStyle.getPropertyValue(prop) || computedStyle[prop as any] || '';\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string): number => validFiniteNumber(parseFloat(value || ''));\r\n\r\nexport const roundCssNumber = (value: number) => Math.round(value * 10000) / 10000;\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${roundCssNumber(validFiniteNumber(ratio) * 100)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${roundCssNumber(validFiniteNumber(number))}px`;\r\n\r\nexport function setStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObject | false | null | undefined\r\n): void {\r\n  elm &&\r\n    styles &&\r\n    each(styles, (rawValue: StyleObjectValue, name) => {\r\n      try {\r\n        const elmStyle = elm.style;\r\n        const value =\r\n          isNull(rawValue) || isBoolean(rawValue)\r\n            ? ''\r\n            : isNumber(rawValue)\r\n            ? numberToCssPx(rawValue)\r\n            : rawValue;\r\n\r\n        if (name.indexOf('--') === 0) {\r\n          elmStyle.setProperty(name, value);\r\n        } else {\r\n          elmStyle[name as any] = value;\r\n        }\r\n      } catch {}\r\n    });\r\n}\r\n\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey>,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): string;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey> | StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>> | string {\r\n  const getSingleStyle = isString(styles);\r\n  let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n\r\n  if (elm) {\r\n    const computedStyle = wnd.getComputedStyle(elm, pseudoElm) || elm.style;\r\n    getStylesResult = getSingleStyle\r\n      ? getCSSVal(computedStyle, styles)\r\n      : from(styles).reduce((result, key) => {\r\n          result[key] = getCSSVal(computedStyle, key);\r\n          return result;\r\n        }, getStylesResult as PlainObject);\r\n  }\r\n  return getStylesResult;\r\n}\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElementTarget,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = getStyles(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n","import type { HTMLElementTarget } from './types';\r\nimport { getStyles } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        w: (elm as any)[`${property}Width`],\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const getWindowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const getOffsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getClientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getScrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const getFractionalSize = (elm: HTMLElementTarget): Readonly<WH> => {\r\n  const cssWidth = parseFloat(getStyles(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(getStyles(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElementTarget): boolean =>\r\n  !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n","import type { DomTokens } from './attribute';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { keys } from '../utils';\r\nimport { getDomTokensArray } from './attribute';\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerTarget = EventTarget | false | null | undefined;\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: ((event: any) => any) | false | null | undefined;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(getDomTokensArray(eventNames), (eventName) => {\r\n    target && target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: ((event: T) => any) | false | null | undefined,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const passive = (options && options._passive) ?? true;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions = {\r\n    passive,\r\n    capture,\r\n  };\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    getDomTokensArray(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              listener && listener(evt);\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      target && target.addEventListener(eventName, finalListener, nativeOptions);\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventListenerTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import type { XY } from './offset';\r\nimport type { WH } from './dimensions';\r\nimport { capNumber, isNumber, mathAbs, mathSign } from '../utils';\r\n\r\nexport interface ScrollCoordinates {\r\n  /** The start (origin) scroll coordinates for each axis. */\r\n  _start: XY<number>;\r\n  /** The end scroll coordinates for each axis. */\r\n  _end: XY<number>;\r\n}\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY<number | false | null | undefined>> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElementScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n\r\n/**\r\n * Scroll Coordinates which are 0.\r\n */\r\nexport const getZeroScrollCoordinates = (): ScrollCoordinates => ({\r\n  _start: { x: 0, y: 0 },\r\n  _end: { x: 0, y: 0 },\r\n});\r\n\r\n/**\r\n * Sanatizes raw scroll coordinates.\r\n * The passed `overflowAmount` is used as the \"max\" value for each axis if the sign of the raw max value is not `0`.\r\n * Makes sure that each axis has `0` either in the start or end coordinates.\r\n * @param rawScrollCoordinates The raw scroll coordinates.\r\n * @param overflowAmount The overflow amount.\r\n * @returns\r\n */\r\nexport const sanitizeScrollCoordinates = (\r\n  rawScrollCoordinates: ScrollCoordinates,\r\n  overflowAmount: WH<number>\r\n) => {\r\n  const { _start, _end } = rawScrollCoordinates;\r\n  const { w, h } = overflowAmount;\r\n  const sanitizeAxis = (start: number, end: number, amount: number) => {\r\n    let newStart = mathSign(start) * amount;\r\n    let newEnd = mathSign(end) * amount;\r\n\r\n    if (newStart === newEnd) {\r\n      const startAbs = mathAbs(start);\r\n      const endAbs = mathAbs(end);\r\n\r\n      newEnd = startAbs > endAbs ? 0 : newEnd;\r\n      newStart = startAbs < endAbs ? 0 : newStart;\r\n    }\r\n\r\n    // in doubt set start to 0\r\n    newStart = newStart === newEnd ? 0 : newStart;\r\n\r\n    return [newStart + 0, newEnd + 0] as const; // \"+ 0\" prevents \"-0\" to be in the result\r\n  };\r\n\r\n  const [startX, endX] = sanitizeAxis(_start.x, _end.x, w);\r\n  const [startY, endY] = sanitizeAxis(_start.y, _end.y, h);\r\n\r\n  return {\r\n    _start: {\r\n      x: startX,\r\n      y: startY,\r\n    },\r\n    _end: {\r\n      x: endX,\r\n      y: endY,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Returns whether the passed scroll coordinates represent the browsers default scroll direction.\r\n * For the default scroll direction the following must be true:\r\n * 1. Start value is `0`.\r\n * 2. End value <= Start value.\r\n * @param scrollCoordinates The scroll coordinates.\r\n */\r\nexport const isDefaultDirectionScrollCoordinates = ({\r\n  _start,\r\n  _end,\r\n}: ScrollCoordinates): XY<boolean> => {\r\n  const getAxis = (start: number, end: number) => start === 0 && start <= end;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x),\r\n    y: getAxis(_start.y, _end.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the current scroll percent between 0..1 for each axis.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param currentScroll The current scroll position of the element.\r\n */\r\nexport const getScrollCoordinatesPercent = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  currentScroll: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, current: number) =>\r\n    capNumber(0, 1, (start - current) / (start - end) || 0);\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, currentScroll.x),\r\n    y: getAxis(_start.y, _end.y, currentScroll.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the scroll position of the given percent.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param percent The percentage of the scroll.\r\n */\r\nexport const getScrollCoordinatesPosition = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  percent: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, p: number) => start + (end - start) * p;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, percent.x),\r\n    y: getAxis(_start.y, _end.y, percent.y),\r\n  };\r\n};\r\n","import type { NodeElementTarget } from './types';\r\n\r\nexport const focusElement = (element: NodeElementTarget) => {\r\n  if (element && (element as HTMLElement).focus) {\r\n    (element as HTMLElement).focus({ preventScroll: true });\r\n  }\r\n};\r\n","import { isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear, createOrKeepArray } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(createOrKeepArray(listener), callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n","import {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from '~/support';\r\nimport type { DeepPartial, DeepReadonly } from '~/typings';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends OptionsField\r\n    ?\r\n        | (IncompletePath extends true ? F : never)\r\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n    : never\r\n  : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n  ? []\r\n  : S extends `${infer T}.${infer U}`\r\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n  : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends keyof O\r\n    ? O[F] extends OptionsPrimitiveValue\r\n      ? O[F]\r\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n    : never\r\n  : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The scrollbar click scroll behavior.\r\n */\r\nexport type ScrollbarsClickScrollBehavior = boolean | 'instant';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether it is possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether it is possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: ScrollbarsClickScrollBehavior;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        // @ts-ignore\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n","import { strOverflowX, strOverflowY } from './support';\r\n\r\nconst dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentScrollbarHidden = `${classNameEnvironment}-scrollbar-hidden`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// shared\r\nexport const dataValueNoClipping = 'noClipping';\r\n\r\n// body\r\nexport const dataAttributeHtmlBody = `${dataAttributePrefix}-body`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataValueHostIsHost = 'host';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportOverflowXPrefix = strOverflowX;\r\nexport const dataValueViewportOverflowYPrefix = strOverflowY;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportMeasuring = 'measuring';\r\nexport const dataValueViewportScrolling = 'scrolling';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportNoContent = 'noContent';\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n","let nonce: string | undefined;\r\n\r\nexport const getNonce = () => nonce;\r\nexport const setNonce = (newNonce: string | undefined) => {\r\n  nonce = newNonce;\r\n};\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  appendChildren,\r\n  getFractionalSize,\r\n  getClientSize,\r\n  getOffsetSize,\r\n  removeAttrs,\r\n  removeElements,\r\n  assignDeep,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  getStyles,\r\n  isBodyElement,\r\n  isFunction,\r\n  addEventListener,\r\n} from '~/support';\r\nimport { classNameEnvironment, classNameEnvironmentScrollbarHidden } from '~/classnames';\r\nimport { defaultOptions } from '~/options';\r\nimport type { XY, EventListener } from '~/support';\r\nimport type { Options, PartialOptions } from '~/options';\r\nimport type { Initialization, PartialInitialization } from '~/initialization';\r\nimport type { StyleObjectKey } from './typings';\r\nimport { getNonce } from './nonce';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\nexport interface Env {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: Env;\r\n\r\nconst createEnvironment = (): Env => {\r\n  const getNativeScrollbarSize = (\r\n    measureElm: HTMLElement,\r\n    measureElmChild: HTMLElement,\r\n    clear?: boolean\r\n  ): XY => {\r\n    // fix weird safari issue where getComputedStyle returns all empty styles by appending twice\r\n    appendChildren(document.body, measureElm);\r\n    appendChildren(document.body, measureElm);\r\n\r\n    const cSize = getClientSize(measureElm);\r\n    const oSize = getOffsetSize(measureElm);\r\n    const fSize = getFractionalSize(measureElmChild);\r\n\r\n    clear && removeElements(measureElm);\r\n\r\n    return {\r\n      x: oSize.h - cSize.h + fSize.h,\r\n      y: oSize.w - cSize.w + fSize.w,\r\n    };\r\n  };\r\n\r\n  const getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n    let result = false;\r\n    const revertClass = addClass(testElm, classNameEnvironmentScrollbarHidden);\r\n    try {\r\n      result =\r\n        getStyles(testElm, 'scrollbar-width' as StyleObjectKey) === 'none' ||\r\n        getStyles(testElm, 'display', '::-webkit-scrollbar') === 'none';\r\n    } catch {}\r\n    revertClass();\r\n    return result;\r\n  };\r\n\r\n  // changes to this styles need to be reflected in the \"hide native scrollbars\" section of the structure styles\r\n  const envStyle = `.${classNameEnvironment}{scroll-behavior:auto!important;position:fixed;opacity:0;visibility:hidden;overflow:scroll;height:200px;width:200px;z-index:-1}.${classNameEnvironment} div{width:200%;height:200%;margin:10px 0}.${classNameEnvironmentScrollbarHidden}{scrollbar-width:none!important}.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar,.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar-corner{appearance:none!important;display:none!important;width:0!important;height:0!important}`;\r\n  const envDOM = createDOM(\r\n    `<div class=\"${classNameEnvironment}\"><div></div><style>${envStyle}</style></div>`\r\n  );\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const styleElm = envElm.lastChild as HTMLStyleElement;\r\n  const nonce = getNonce();\r\n\r\n  if (nonce) {\r\n    styleElm.nonce = nonce;\r\n  }\r\n\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) => nativeScrollbarsHiding && isBodyElement(target) && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: Env = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _scrollTimeline: !!scrollT,\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttrs(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  addEventListener(wnd, 'resize', () => {\r\n    triggerEvent('r', []);\r\n  });\r\n\r\n  if (\r\n    isFunction(wnd.matchMedia) &&\r\n    !nativeScrollbarsHiding &&\r\n    (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)\r\n  ) {\r\n    const addZoomListener = (onZoom: () => void) => {\r\n      const media = wnd.matchMedia(`(resolution: ${wnd.devicePixelRatio}dppx)`);\r\n      addEventListener(\r\n        media,\r\n        'change',\r\n        () => {\r\n          onZoom();\r\n          addZoomListener(onZoom);\r\n        },\r\n        {\r\n          _once: true,\r\n        }\r\n      );\r\n    };\r\n    addZoomListener(() => {\r\n      const [updatedNativeScrollbarSize, nativeScrollbarSizeChanged] =\r\n        updateNativeScrollbarSizeCache();\r\n\r\n      assignDeep(env._nativeScrollbarsSize, updatedNativeScrollbarSize); // keep the object and just re-assign!\r\n      triggerEvent('r', [nativeScrollbarSizeChanged]);\r\n    });\r\n  }\r\n\r\n  return env;\r\n};\r\n\r\nexport const getEnvironment = (): Env => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n","import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { DeepPartial } from '~/typings';\r\n\r\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\r\n  StaticInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\r\n  DynamicInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\nexport type StaticInitialization = HTMLElement | false | null;\r\nexport type DynamicInitialization = HTMLElement | boolean | null;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n","import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n  getAttr,\r\n  isString,\r\n} from '~/support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[] | readonly string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames, (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        const newValue =\r\n          isAttrChange && getAttr(mutationTarget as HTMLElement, attributeName || '');\r\n        // narrow down attributeValue type to `string` or `null` but don't overwrite `<empty string>` with `null`\r\n        const attributeValue = isString(newValue) ? newValue : null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import { each, keys } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['static'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['static']>\r\n    : void\r\n  : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['instance'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['instance']>\r\n    : void\r\n  : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n","function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import {\r\n  each,\r\n  hasOwnProperty,\r\n  keys,\r\n  push,\r\n  isEmptyObject,\r\n  type,\r\n  isUndefined,\r\n  isPlainObject,\r\n  isString,\r\n  createOrKeepArray,\r\n} from '~/support';\r\nimport type { PlainObject, DeepPartial } from '~/typings';\r\nimport type { OptionsObject } from '~/options';\r\n\r\nexport type OptionsFunctionType = (this: any, ...args: any[]) => any;\r\nexport type OptionsTemplateType<T extends OptionsTemplateNativeTypes> = ExtractPropsKey<\r\n  OptionsTemplateTypeMap,\r\n  T\r\n>;\r\nexport type OptionsTemplateTypes = keyof OptionsTemplateTypeMap;\r\nexport type OptionsTemplateNativeTypes = OptionsTemplateTypeMap[keyof OptionsTemplateTypeMap];\r\n\r\nexport type OptionsTemplateValue<T extends OptionsTemplateNativeTypes = string> = T extends string\r\n  ? string extends T\r\n    ? OptionsTemplateValueNonEnum<T>\r\n    : string\r\n  : OptionsTemplateValueNonEnum<T>;\r\n\r\nexport type OptionsTemplate<T> = {\r\n  [P in keyof T]: T[P] extends OptionsObject\r\n    ? OptionsTemplate<T[P]>\r\n    : T[P] extends OptionsTemplateNativeTypes\r\n    ? OptionsTemplateValue<T[P]>\r\n    : never;\r\n};\r\n\r\nexport type OptionsValidationResult<T> = [\r\n  validated: DeepPartial<T>,\r\n  foreign: Record<string, unknown>\r\n];\r\n\r\ntype OptionsTemplateTypeMap = {\r\n  __TPL_boolean_TYPE__: boolean;\r\n  __TPL_number_TYPE__: number;\r\n  __TPL_string_TYPE__: string;\r\n  __TPL_array_TYPE__: Array<any> | ReadonlyArray<any>;\r\n  __TPL_function_TYPE__: OptionsFunctionType;\r\n  __TPL_null_TYPE__: null;\r\n  __TPL_object_TYPE__: OptionsObject;\r\n};\r\n\r\ntype OptionsTemplateValueNonEnum<T extends OptionsTemplateNativeTypes> =\r\n  | OptionsTemplateType<T>\r\n  | [OptionsTemplateType<T>, ...Array<OptionsTemplateTypes>];\r\n\r\ntype ExtractPropsKey<T, TProps extends T[keyof T]> = {\r\n  [P in keyof T]: TProps extends T[P] ? P : never;\r\n}[keyof T];\r\n\r\ntype OptionsTemplateTypesDictionary = {\r\n  readonly boolean: OptionsTemplateType<boolean>;\r\n  readonly number: OptionsTemplateType<number>;\r\n  readonly string: OptionsTemplateType<string>;\r\n  readonly array: OptionsTemplateType<Array<any>>;\r\n  readonly object: OptionsTemplateType<OptionsObject>;\r\n  readonly function: OptionsTemplateType<OptionsFunctionType>;\r\n  readonly null: OptionsTemplateType<null>;\r\n};\r\n\r\nconst optionsTemplateTypes: OptionsTemplateTypesDictionary = {\r\n  boolean: '__TPL_boolean_TYPE__',\r\n  number: '__TPL_number_TYPE__',\r\n  string: '__TPL_string_TYPE__',\r\n  array: '__TPL_array_TYPE__',\r\n  object: '__TPL_object_TYPE__',\r\n  function: '__TPL_function_TYPE__',\r\n  null: '__TPL_null_TYPE__',\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a object which looks like:\r\n * {\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n * }\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param optionsDiff When provided the returned validated object will only have properties which are different to this objects properties.\r\n * Example (assume all properties are valid to the template):\r\n * Options object            : { a: 'a', b: 'b', c: 'c' }\r\n * optionsDiff object        : { a: 'a', b: 'b', c: undefined }\r\n * Returned validated object : { c: 'c' }\r\n * Because the value of the properties a and b didn't change, they aren't included in the returned object.\r\n * Without the optionsDiff object the returned validated object would be: { a: 'a', b: 'b', c: 'c' }\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n * @param propPath The propertyPath which lead to this object. (used for error logging)\r\n */\r\nconst validateRecursive = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: DeepPartial<T>,\r\n  doWriteErrors?: boolean,\r\n  propPath?: string\r\n): OptionsValidationResult<T> => {\r\n  const validatedOptions: DeepPartial<T> = {};\r\n  const optionsCopy: DeepPartial<T> = { ...options };\r\n  const props = keys(template).filter((prop) => hasOwnProperty(options, prop));\r\n\r\n  each(props, (prop: Extract<keyof T, string>) => {\r\n    const optionsValue: any = options[prop];\r\n    const templateValue: PlainObject | string | OptionsTemplateTypes | Array<OptionsTemplateTypes> =\r\n      template[prop];\r\n    const templateIsComplex = isPlainObject(templateValue);\r\n    const propPrefix = propPath ? `${propPath}.` : '';\r\n\r\n    // if the template has a object as value, it means that the options are complex (nested)\r\n    if (templateIsComplex && isPlainObject(optionsValue)) {\r\n      const [validated, foreign] = validateRecursive(\r\n        templateValue as T,\r\n        optionsValue,\r\n        doWriteErrors,\r\n        propPrefix + prop\r\n      );\r\n      validatedOptions[prop] = validated as any;\r\n      optionsCopy[prop] = foreign as any;\r\n\r\n      each([optionsCopy, validatedOptions], (value) => {\r\n        if (isEmptyObject(value[prop])) {\r\n          delete value[prop];\r\n        }\r\n      });\r\n    } else if (!templateIsComplex) {\r\n      let isValid = false;\r\n      const errorEnumStrings: Array<string> = [];\r\n      const errorPossibleTypes: Array<string> = [];\r\n      const optionsValueType = type(optionsValue) as keyof typeof optionsTemplateTypes;\r\n      const templateValueArr: Array<string | OptionsTemplateTypes> =\r\n        createOrKeepArray(templateValue);\r\n\r\n      each(templateValueArr, (currTemplateType) => {\r\n        // if currType value isn't inside possibleTemplateTypes we assume its a enum string value\r\n        let typeString: string | undefined;\r\n        each(optionsTemplateTypes, (value: string, key: string) => {\r\n          if (value === currTemplateType) {\r\n            typeString = key;\r\n          }\r\n        });\r\n        const isEnumString = isUndefined(typeString);\r\n        if (isEnumString && isString(optionsValue)) {\r\n          // split it into a array which contains all possible values for example: [\"yes\", \"no\", \"maybe\"]\r\n          const enumStringSplit = currTemplateType.split(' ');\r\n          isValid = !!enumStringSplit.find((possibility) => possibility === optionsValue);\r\n\r\n          // build error message\r\n          push(errorEnumStrings, enumStringSplit);\r\n        } else {\r\n          isValid = optionsTemplateTypes[optionsValueType] === currTemplateType;\r\n        }\r\n\r\n        // build error message\r\n        push(errorPossibleTypes, isEnumString ? optionsTemplateTypes.string : typeString!);\r\n\r\n        // continue if invalid, break if valid\r\n        return !isValid;\r\n      });\r\n\r\n      if (isValid) {\r\n        validatedOptions[prop] = optionsValue;\r\n      } else if (doWriteErrors) {\r\n        console.warn(\r\n          `${\r\n            `The option \"${propPrefix}${prop}\" wasn't set, because it doesn't accept the type [ ${optionsValueType.toUpperCase()} ] with the value of \"${optionsValue}\".\\r\\n` +\r\n            `Accepted types are: [ ${errorPossibleTypes.join(', ').toUpperCase()} ].\\r\\n`\r\n          }${\r\n            errorEnumStrings.length > 0\r\n              ? `\\r\\nValid strings are: [ ${errorEnumStrings.join(', ')} ].`\r\n              : ''\r\n          }`\r\n        );\r\n      }\r\n\r\n      delete optionsCopy[prop];\r\n    }\r\n  });\r\n\r\n  return [validatedOptions, optionsCopy]; // optionsCopy equals now to foreign options\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a tuple which looks like:\r\n * [\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n * ]\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n */\r\nconst validateOptions = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: DeepPartial<T>,\r\n  doWriteErrors?: boolean\r\n): OptionsValidationResult<T> => validateRecursive<T>(template, options, doWriteErrors);\r\n\r\nexport { validateOptions, optionsTemplateTypes };\r\n","import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n  ScrollbarsClickScrollBehavior,\r\n} from '~/options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '~/plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n      const scrollbarsClickScrollAllowedValues: OptionsTemplateValue<ScrollbarsClickScrollBehavior> =\r\n        [booleanAllowedValues, oTypes.string];\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scroll\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scroll\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: scrollbarsClickScrollAllowedValues, // true || false || instant\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  appendChildren,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '~/classnames';\r\nimport type { StaticPlugin } from '../plugins';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = getOffsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = getOffsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        setStyles(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n","import { strHidden, strScroll, strVisible } from '~/support';\r\nimport type { Env } from '~/environment';\r\nimport type { XY } from '~/support';\r\nimport type { Options, OptionsCheckFn, OverflowBehavior } from '~/options';\r\nimport type { OverflowStyle } from '~/typings';\r\n\r\nexport interface ViewportOverflowState {\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport const getShowNativeOverlaidScrollbars = (checkOption: OptionsCheckFn<Options>, env: Env) => {\r\n  const { _nativeScrollbarsOverlaid } = env;\r\n  const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = checkOption(\r\n    'showNativeOverlaidScrollbars'\r\n  );\r\n\r\n  return [\r\n    showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y,\r\n    showNativeOverlaidScrollbarsChanged,\r\n  ] as const;\r\n};\r\n\r\nexport const overflowIsVisible = (overflowBehavior: string) =>\r\n  overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n/**\r\n * Creates a viewport overflow state object.\r\n * @param hasOverflow The information whether an axis has overflow.\r\n * @param overflowBehavior The overflow behavior according to the options.\r\n * @returns A object which represents the newly set overflow state.\r\n */\r\nexport const createViewportOverflowState = (\r\n  hasOverflow: Partial<XY<boolean>>,\r\n  overflowBehavior: XY<OverflowBehavior>\r\n): ViewportOverflowState => {\r\n  const getAxisOverflowStyle = (\r\n    axisBehavior: OverflowBehavior,\r\n    axisHasOverflow: boolean | undefined,\r\n    perpendicularBehavior: OverflowBehavior,\r\n    perpendicularOverflow: boolean | undefined\r\n  ): OverflowStyle => {\r\n    // convert behavior to style:\r\n    // 'visible'        -> 'hidden'\r\n    // 'hidden'         -> 'hidden'\r\n    // 'scroll'         -> 'scroll'\r\n    // 'visible-hidden' -> 'hidden'\r\n    // 'visible-scroll' -> 'scroll'\r\n    const behaviorStyle =\r\n      axisBehavior === strVisible\r\n        ? strHidden\r\n        : (axisBehavior.replace(`${strVisible}-`, '') as OverflowStyle);\r\n    const axisOverflowVisible = overflowIsVisible(axisBehavior);\r\n    const perpendicularOverflowVisible = overflowIsVisible(perpendicularBehavior);\r\n\r\n    // if no axis has overflow set 'hidden'\r\n    if (!axisHasOverflow && !perpendicularOverflow) {\r\n      return strHidden;\r\n    }\r\n\r\n    // if both axis have a visible behavior ('visible', 'visible-hidden', 'visible-scroll') set 'visible'\r\n    if (axisOverflowVisible && perpendicularOverflowVisible) {\r\n      return strVisible;\r\n    }\r\n\r\n    // this this axis has a visible behavior\r\n    if (axisOverflowVisible) {\r\n      const nonPerpendicularOverflow = axisHasOverflow ? strVisible : strHidden;\r\n      return axisHasOverflow && perpendicularOverflow\r\n        ? behaviorStyle // if both axis have an overflow set ('hidden' or 'scroll')\r\n        : nonPerpendicularOverflow; // if only this axis has an overflow set 'visible', if no axis has an overflow set 'hidden'\r\n    }\r\n\r\n    const nonOverflow =\r\n      perpendicularOverflowVisible && perpendicularOverflow ? strVisible : strHidden;\r\n    return axisHasOverflow\r\n      ? behaviorStyle // if this axis has an overflow\r\n      : nonOverflow; // if the perp. axis has a visible behavior and has an overflow set 'visible', otherwise set 'hidden'\r\n  };\r\n\r\n  const _overflowStyle = {\r\n    x: getAxisOverflowStyle(overflowBehavior.x, hasOverflow.x, overflowBehavior.y, hasOverflow.y),\r\n    y: getAxisOverflowStyle(overflowBehavior.y, hasOverflow.y, overflowBehavior.x, hasOverflow.x),\r\n  };\r\n\r\n  return {\r\n    _overflowStyle,\r\n    _overflowScroll: {\r\n      x: _overflowStyle.x === strScroll,\r\n      y: _overflowStyle.y === strScroll,\r\n    },\r\n  };\r\n};\r\n","import {\r\n  keys,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  getStyles,\r\n  setStyles,\r\n  removeAttrClass,\r\n  strWidth,\r\n  strOverflowY,\r\n  strOverflowX,\r\n  strScroll,\r\n} from '~/support';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\r\nimport { getShowNativeOverlaidScrollbars } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { ObserversSetupState } from '~/setups';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type { ViewportOverflowState } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { Env } from '~/environment';\r\nimport type { WH } from '~/support';\r\nimport type { OverflowStyle, StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _viewportArrangement: (\r\n        structureSetupElements: StructureSetupElementsObj,\r\n        structureSetupState: StructureSetupState,\r\n        observersSetupState: ObserversSetupState,\r\n        env: Env,\r\n        checkOptions: OptionsCheckFn<Options>\r\n      ) => {\r\n        const { _viewportIsTarget, _viewport } = structureSetupElements;\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _nativeScrollbarsSize } = env;\r\n        const doViewportArrange =\r\n          !_viewportIsTarget &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const [showNativeOverlaidScrollbars] = getShowNativeOverlaidScrollbars(checkOptions, env);\r\n\r\n        /**\r\n         * Gets the current overflow state of the viewport.\r\n         */\r\n        const readViewportOverflowState = (): ViewportOverflowState => {\r\n          const getStatePerAxis = (styleKey: StyleObjectKey) => {\r\n            const overflowStyle = getStyles(_viewport, styleKey) as OverflowStyle;\r\n            const overflowScroll = overflowStyle === strScroll;\r\n\r\n            return [overflowStyle, overflowScroll] as const;\r\n          };\r\n\r\n          const [xOverflowStyle, xOverflowScroll] = getStatePerAxis(strOverflowX);\r\n          const [yOverflowStyle, yOverflowScroll] = getStatePerAxis(strOverflowY);\r\n\r\n          return {\r\n            _overflowStyle: {\r\n              x: xOverflowStyle,\r\n              y: yOverflowStyle,\r\n            },\r\n            _overflowScroll: {\r\n              x: xOverflowScroll,\r\n              y: yOverflowScroll,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Gets the hide offset matching the passed overflow state.\r\n         * @param viewportOverflowState The overflow state of the viewport\r\n         */\r\n        const _getViewportOverflowHideOffset = (viewportOverflowState: ViewportOverflowState) => {\r\n          const { _overflowScroll } = viewportOverflowState;\r\n          const arrangeHideOffset =\r\n            _nativeScrollbarsHiding || showNativeOverlaidScrollbars ? 0 : 42;\r\n\r\n          const getHideOffsetPerAxis = (\r\n            isOverlaid: boolean,\r\n            overflowScroll: boolean,\r\n            nativeScrollbarSize: number\r\n          ) => {\r\n            const nonScrollbarStylingHideOffset = isOverlaid\r\n              ? arrangeHideOffset\r\n              : nativeScrollbarSize;\r\n            const scrollbarsHideOffset =\r\n              overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n            const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n            return [scrollbarsHideOffset, scrollbarsHideOffsetArrange] as const;\r\n          };\r\n\r\n          const [xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.x,\r\n            _overflowScroll.x,\r\n            _nativeScrollbarsSize.x\r\n          );\r\n          const [yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.y,\r\n            _overflowScroll.y,\r\n            _nativeScrollbarsSize.y\r\n          );\r\n\r\n          return {\r\n            _scrollbarsHideOffset: {\r\n              x: xScrollbarsHideOffset,\r\n              y: yScrollbarsHideOffset,\r\n            },\r\n            _scrollbarsHideOffsetArrange: {\r\n              x: xScrollbarsHideOffsetArrange,\r\n              y: yScrollbarsHideOffsetArrange,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Hides the native scrollbars according to the passed parameters.\r\n         * @param viewportOverflowState The viewport overflow state.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n         * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n         */\r\n        const _hideNativeScrollbars = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          { _directionIsRTL }: ObserversSetupState,\r\n          viewportArrange: boolean\r\n        ): StyleObject | undefined => {\r\n          if (!_viewportIsTarget) {\r\n            const viewportStyleObj: StyleObject = assignDeep(\r\n              {},\r\n              {\r\n                [strMarginRight]: 0,\r\n                [strMarginBottom]: 0,\r\n                [strMarginLeft]: 0,\r\n              }\r\n            );\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const horizontalMarginKey: keyof StyleObject = _directionIsRTL\r\n              ? strMarginLeft\r\n              : strMarginRight;\r\n            const viewportHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingLeft\r\n              : strPaddingRight;\r\n            const horizontalMarginValue = _viewportPaddingStyle[horizontalMarginKey] as number;\r\n            const verticalMarginValue = _viewportPaddingStyle[strMarginBottom] as number;\r\n            const horizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportHorizontalPaddingKey\r\n            ] as number;\r\n            const verticalPaddingValue = _viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n            // horizontal\r\n            viewportStyleObj[strWidth] = `calc(100% + ${\r\n              hideOffsetY + horizontalMarginValue * -1\r\n            }px)`;\r\n            viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n            // vertical\r\n            viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n            // viewport arrange additional styles\r\n            if (viewportArrange) {\r\n              viewportStyleObj[viewportHorizontalPaddingKey] =\r\n                horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n              viewportStyleObj[strPaddingBottom] =\r\n                verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n            }\r\n\r\n            return viewportStyleObj;\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const _arrangeViewport = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          viewportScrollSize: WH<number>,\r\n          sizeFraction: WH<number>\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _directionIsRTL } = observersSetupState;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            setStyles(_viewport, {\r\n              '--os-vaw': arrangeSize.w,\r\n              '--os-vah': arrangeSize.h,\r\n            });\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n         */\r\n        const _undoViewportArrange = (viewportOverflowState?: ViewportOverflowState) => {\r\n          if (doViewportArrange) {\r\n            const finalViewportOverflowState = viewportOverflowState || readViewportOverflowState();\r\n            const { _viewportPaddingStyle: viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffsetArrange } = _getViewportOverflowHideOffset(\r\n              finalViewportOverflowState\r\n            );\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = getStyles(_viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n            const addArrange = removeAttrClass(\r\n              _viewport,\r\n              dataAttributeViewport,\r\n              dataValueViewportArrange\r\n            );\r\n\r\n            setStyles(_viewport, finalPaddingStyle);\r\n\r\n            return [\r\n              () => {\r\n                setStyles(\r\n                  _viewport,\r\n                  assignDeep(\r\n                    {},\r\n                    prevStyle,\r\n                    _hideNativeScrollbars(\r\n                      finalViewportOverflowState,\r\n                      observersSetupState,\r\n                      doViewportArrange\r\n                    )\r\n                  )\r\n                );\r\n                addArrange();\r\n              },\r\n              finalViewportOverflowState,\r\n            ] as const;\r\n          }\r\n          return [noop] as const;\r\n        };\r\n\r\n        return {\r\n          _getViewportOverflowHideOffset,\r\n          _arrangeViewport,\r\n          _undoViewportArrange,\r\n          _hideNativeScrollbars,\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n","import { animateNumber, noop, selfClearTimeout } from '~/support';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        targetOffset: number,\r\n        handleLength: number,\r\n        onClickScrollCompleted: (stopped: boolean) => void\r\n      ) => {\r\n        // click scroll animation has 2 main parts:\r\n        // 1. the \"click\" which scrolls 100% of the viewport in a certain amount of time\r\n        // 2. the \"press\" which scrolls to the point where the cursor is located, the \"press\" always waits for the \"click\" to finish\r\n        // The \"click\" should not be canceled by a \"pointerup\" event because very fast clicks or taps would cancel it too fast\r\n        // The \"click\" should only be canceled by a subsequent \"pointerdown\" event because otherwise 2 animations would run\r\n        // The \"press\" should be canceld by the next \"pointerup\" event\r\n\r\n        let stopped = false;\r\n        let stopPressAnimation = noop;\r\n        const linearScrollMs = 133;\r\n        const easedScrollMs = 222;\r\n        const [setPressAnimationTimeout, clearPressAnimationTimeout] =\r\n          selfClearTimeout(linearScrollMs);\r\n        const targetOffsetSign = Math.sign(targetOffset);\r\n        const handleLengthWithTargetSign = handleLength * targetOffsetSign;\r\n        const handleLengthWithTargetSignHalf = handleLengthWithTargetSign / 2;\r\n        const easing = (x: number) => 1 - (1 - x) * (1 - x); // easeOutQuad;\r\n        const easedEndPressAnimation = (from: number, to: number) =>\r\n          animateNumber(from, to, easedScrollMs, moveHandleRelative, easing);\r\n        const linearPressAnimation = (linearFrom: number, msFactor: number) =>\r\n          animateNumber(\r\n            linearFrom,\r\n            targetOffset - handleLengthWithTargetSign,\r\n            linearScrollMs * msFactor,\r\n            (progress, _, completed) => {\r\n              moveHandleRelative(progress);\r\n\r\n              if (completed) {\r\n                stopPressAnimation = easedEndPressAnimation(progress, targetOffset);\r\n              }\r\n            }\r\n          );\r\n        const stopClickAnimation = animateNumber(\r\n          0,\r\n          handleLengthWithTargetSign,\r\n          easedScrollMs,\r\n          (clickAnimationProgress, _, clickAnimationCompleted) => {\r\n            moveHandleRelative(clickAnimationProgress);\r\n\r\n            if (clickAnimationCompleted) {\r\n              onClickScrollCompleted(stopped);\r\n\r\n              if (!stopped) {\r\n                const remainingScrollDistance = targetOffset - clickAnimationProgress;\r\n                const continueWithPress =\r\n                  Math.sign(remainingScrollDistance - handleLengthWithTargetSignHalf) ===\r\n                  targetOffsetSign;\r\n\r\n                continueWithPress &&\r\n                  setPressAnimationTimeout(() => {\r\n                    const remainingLinearScrollDistance =\r\n                      remainingScrollDistance - handleLengthWithTargetSign;\r\n                    const linearBridge =\r\n                      Math.sign(remainingLinearScrollDistance) === targetOffsetSign;\r\n\r\n                    stopPressAnimation = linearBridge\r\n                      ? linearPressAnimation(\r\n                          clickAnimationProgress,\r\n                          Math.abs(remainingLinearScrollDistance) / handleLength\r\n                        )\r\n                      : easedEndPressAnimation(clickAnimationProgress, targetOffset);\r\n                  });\r\n              }\r\n            }\r\n          },\r\n          easing\r\n        );\r\n\r\n        return (stopClick?: boolean) => {\r\n          stopped = true;\r\n\r\n          if (stopClick) {\r\n            stopClickAnimation();\r\n          }\r\n\r\n          clearPressAnimationTimeout();\r\n          stopPressAnimation();\r\n        };\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n","import {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  appendChildren,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\r\nimport type { SizeObserverPlugin } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const { _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const baseElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const sizeObserver = baseElements[0] as HTMLElement;\r\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n    const onSizeChangedCallbackProxy = (sizeChangedContext?: ResizeObserverEntry | boolean) => {\r\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          sizeChangedContext.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currRContentRect);\r\n        appear = domRectAppeared(currRContentRect, prevContentRect);\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _sizeChanged: true,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\r\n        onSizeChangedCallbackProxy(entries.pop())\r\n      );\r\n      resizeObserverInstance.observe(listenerElement);\r\n      push(destroyFns, () => {\r\n        resizeObserverInstance.disconnect();\r\n      });\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        listenerElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(sizeObserver, classNameSizeObserverAppear),\r\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\r\n  };\r\n};\r\n","import {\r\n  createDiv,\r\n  getOffsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = getOffsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n","import {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  equalWH,\r\n  getFractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  keys,\r\n  liesBetween,\r\n  getScrollSize,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  domRectAppeared,\r\n  concat,\r\n  getStyles,\r\n  hasAttrClass,\r\n} from '~/support';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueViewportMeasuring,\r\n  dataValueViewportArrange,\r\n  dataValueNoClipping,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { SizeObserverCallbackParams } from '~/observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo, StructureSetupState } from '~/setups';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { PlainObject } from '~/typings';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  getCurrentOption: OptionsCheckFn<Options>,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n  let prevDirectionIsRTL: boolean | undefined;\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open', 'wrap', 'cols', 'rows'];\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _scrollOffsetElement,\r\n    _content,\r\n    _viewportIsTarget,\r\n    _isBody,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n    _removeScrollObscuringStyles,\r\n  } = structureSetupElements;\r\n\r\n  const getDirectionIsRTL = (elm: HTMLElement): boolean => getStyles(elm, 'direction') === 'rtl';\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(_target),\r\n  };\r\n  const env = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const _undoViewportArrange =\r\n        scrollbarsHidingPlugin &&\r\n        scrollbarsHidingPlugin._viewportArrangement(\r\n          structureSetupElements,\r\n          structureSetupState,\r\n          state,\r\n          env,\r\n          getCurrentOption\r\n        )._undoViewportArrange;\r\n\r\n      const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n      const noClipping =\r\n        !viewportIsTargetBody && hasAttrClass(_host, dataAttributeHost, dataValueNoClipping);\r\n      const isArranged = !_viewportIsTarget && _viewportHasClass(dataValueViewportArrange);\r\n      const scrollOffset = isArranged && getElementScroll(_scrollOffsetElement);\r\n      const revertScrollObscuringStyles = scrollOffset && _removeScrollObscuringStyles();\r\n\r\n      const revertMeasuring = _viewportAddRemoveClass(dataValueViewportMeasuring, noClipping);\r\n      const redoViewportArrange = isArranged && _undoViewportArrange && _undoViewportArrange()[0];\r\n      const viewportScroll = getScrollSize(_viewport);\r\n      const fractional = getFractionalSize(_viewport);\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      revertScrollObscuringStyles && revertScrollObscuringStyles();\r\n      noClipping && revertMeasuring();\r\n\r\n      return {\r\n        w: viewportScroll.w + fractional.w,\r\n        h: viewportScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const setDirection = (updateHints: ObserversSetupUpdateHints) => {\r\n    const newDirectionIsRTL = getDirectionIsRTL(_target);\r\n    assignDeep(updateHints, { _directionChanged: prevDirectionIsRTL !== newDirectionIsRTL });\r\n    assignDeep(state, { _directionIsRTL: newDirectionIsRTL });\r\n    prevDirectionIsRTL = newDirectionIsRTL;\r\n  };\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && onObserversUpdated(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({ _sizeChanged, _appear }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && env._nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    updateFn(updateHints);\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    _contentMutation && !fromRecords && updateFn(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _hostMutation: targetStyleChanged,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    }\r\n    /*\r\n    else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n    */\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const [constructTrinsicObserver, updateTrinsicObserver] = _content\r\n    ? createTrinsicObserver(_host, onTrinsicChanged)\r\n    : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: baseStyleChangingAttrs,\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n  const onWindowResizeDebounced = debounce(\r\n    () => {\r\n      const [, _contentMutation] = updateContentSizeCache();\r\n      onObserversUpdated({ _contentMutation });\r\n    },\r\n    {\r\n      _timeout: 222,\r\n      _leading: true,\r\n    }\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      // updateViewportAttrsFromHost();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = env._addResizeListener((_scrollbarSizeChanged) => {\r\n        if (_scrollbarSizeChanged) {\r\n          onObserversUpdatedDebounced({ _scrollbarSizeChanged });\r\n        } else {\r\n          onWindowResizeDebounced();\r\n        }\r\n      });\r\n\r\n      return () => {\r\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n        destroySizeObserver && destroySizeObserver();\r\n        destroyTrinsicObserver && destroyTrinsicObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        updateContentMutationObserver && updateContentMutationObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(baseStyleChangingAttrs, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        hostUpdateResult &&\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n\r\n        trinsicUpdateResult &&\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n\r\n        contentUpdateResult &&\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n      }\r\n\r\n      setDirection(updateHints);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isBoolean,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  bind,\r\n  getElementScroll,\r\n  numberToCssPx,\r\n  setStyles,\r\n  capNumber,\r\n  getScrollCoordinatesPercent,\r\n  isDefaultDirectionScrollCoordinates,\r\n  roundCssNumber,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport type { XY } from '~/support';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _refreshScrollbarsScrollCoordinates: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void\r\n];\r\n\r\ntype ScrollbarStyleFn = (\r\n  scrollbarStructure: ScrollbarStructure\r\n) => [HTMLElement | false | null | undefined, StyleObject | false | null | undefined];\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const cssCustomPropViewportPercent = '--os-viewport-percent';\r\n  const cssCustomPropScrollPercent = '--os-scroll-percent';\r\n  const cssCustomPropScrollDirection = '--os-scroll-direction';\r\n  const { _getDefaultInitialization } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n\r\n  const initScrollTimeline = (axis: keyof XY<unknown>) => {\r\n    if (scrollT) {\r\n      const timeline = new scrollT({\r\n        source: _scrollOffsetElement,\r\n        axis,\r\n      });\r\n\r\n      const _addScrollPercentAnimation = (structure: ScrollbarStructure) => {\r\n        const scrollPercentAnimation = structure._scrollbar.animate(\r\n          {\r\n            // dummy keyframe which fixes bug where the scrollbar handle is reverted to origin position when it should be at its max position\r\n            clear: ['left'],\r\n            [cssCustomPropScrollPercent]: [0, 1],\r\n          },\r\n          {\r\n            timeline,\r\n          }\r\n        );\r\n        return () => scrollPercentAnimation.cancel();\r\n      };\r\n\r\n      return {\r\n        _addScrollPercentAnimation,\r\n      };\r\n    }\r\n  };\r\n  const scrollTimeline = {\r\n    x: initScrollTimeline('x'),\r\n    y: initScrollTimeline('y'),\r\n  };\r\n  const getViewportPercent = () => {\r\n    const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n    const getAxisValue = (axisViewportSize: number, axisOverflowAmount: number) =>\r\n      capNumber(0, 1, axisViewportSize / (axisViewportSize + axisOverflowAmount) || 0);\r\n\r\n    return {\r\n      x: getAxisValue(_overflowEdge.x, _overflowAmount.x),\r\n      y: getAxisValue(_overflowEdge.y, _overflowAmount.y),\r\n    };\r\n  };\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: ScrollbarStyleFn\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      setStyles(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    const viewportPercent = getViewportPercent();\r\n    const createScrollbarStyleFn =\r\n      (axisViewportPercent: number): ScrollbarStyleFn =>\r\n      (structure: ScrollbarStructure) =>\r\n        [\r\n          structure._scrollbar,\r\n          {\r\n            [cssCustomPropViewportPercent]: roundCssNumber(axisViewportPercent) + '',\r\n          },\r\n        ];\r\n\r\n    scrollbarStyle(horizontalScrollbars, createScrollbarStyleFn(viewportPercent.x));\r\n    scrollbarStyle(verticalScrollbars, createScrollbarStyleFn(viewportPercent.y));\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    if (!scrollT) {\r\n      const { _scrollCoordinates } = structureSetupState;\r\n      const scrollPercent = getScrollCoordinatesPercent(\r\n        _scrollCoordinates,\r\n        getElementScroll(_scrollOffsetElement)\r\n      );\r\n      const createScrollbarStyleFn =\r\n        (axisScrollPercent: number): ScrollbarStyleFn =>\r\n        (structure: ScrollbarStructure) =>\r\n          [\r\n            structure._scrollbar,\r\n            {\r\n              [cssCustomPropScrollPercent]: roundCssNumber(axisScrollPercent) + '',\r\n            },\r\n          ];\r\n\r\n      scrollbarStyle(horizontalScrollbars, createScrollbarStyleFn(scrollPercent.x));\r\n      scrollbarStyle(verticalScrollbars, createScrollbarStyleFn(scrollPercent.y));\r\n    }\r\n  };\r\n  const refreshScrollbarsScrollCoordinates = () => {\r\n    const { _scrollCoordinates } = structureSetupState;\r\n    const defaultDirectionScroll = isDefaultDirectionScrollCoordinates(_scrollCoordinates);\r\n    const createScrollbarStyleFn =\r\n      (axisIsDefaultDirectionScrollCoordinates: boolean): ScrollbarStyleFn =>\r\n      (structure: ScrollbarStructure) =>\r\n        [\r\n          structure._scrollbar,\r\n          {\r\n            [cssCustomPropScrollDirection]: axisIsDefaultDirectionScrollCoordinates ? '0' : '1',\r\n          },\r\n        ];\r\n\r\n    scrollbarStyle(horizontalScrollbars, createScrollbarStyleFn(defaultDirectionScroll.x));\r\n    scrollbarStyle(verticalScrollbars, createScrollbarStyleFn(defaultDirectionScroll.y));\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget && !_isBody) {\r\n      const { _overflowAmount, _scrollCoordinates } = structureSetupState;\r\n      const isDefaultDirectionScroll = isDefaultDirectionScrollCoordinates(_scrollCoordinates);\r\n      const scrollPercent = getScrollCoordinatesPercent(\r\n        _scrollCoordinates,\r\n        getElementScroll(_scrollOffsetElement)\r\n      );\r\n      const styleScrollbarPosition: ScrollbarStyleFn = (structure: ScrollbarStructure) => {\r\n        const { _scrollbar } = structure;\r\n        const elm = parent(_scrollbar) === _viewport && _scrollbar;\r\n        const getTranslateValue = (\r\n          axisScrollPercent: number,\r\n          axisOverflowAmount: number,\r\n          axisIsDefaultCoordinates: boolean\r\n        ) => {\r\n          const px = axisOverflowAmount * axisScrollPercent;\r\n          return numberToCssPx(axisIsDefaultCoordinates ? px : -px);\r\n        };\r\n\r\n        return [\r\n          elm,\r\n          elm && {\r\n            transform: getTrasformTranslateValue({\r\n              x: getTranslateValue(scrollPercent.x, _overflowAmount.x, isDefaultDirectionScroll.x),\r\n              y: getTranslateValue(scrollPercent.y, _overflowAmount.y, isDefaultDirectionScroll.y),\r\n            }),\r\n          },\r\n        ];\r\n      };\r\n\r\n      scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n      scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const scrollbar = createDiv(`${classNameScrollbar} ${scrollbarClassName}`);\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n    const timeline = scrollTimeline[xyKey];\r\n\r\n    push(isHorizontal ? horizontalScrollbars : verticalScrollbars, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      timeline && timeline._addScrollPercentAnimation(result),\r\n      scrollbarsSetupEvents(result, scrollbarsAddRemoveClass, isHorizontal),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollCoordinates: refreshScrollbarsScrollCoordinates,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  getFocusedElement,\r\n  setT,\r\n  hasAttr,\r\n  stopAndPrevent,\r\n  isFunction,\r\n  mathAbs,\r\n  focusElement,\r\n} from '~/support';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n} from '~/classnames';\r\nimport type { XY } from '~/support';\r\nimport type { ClickScrollPlugin } from '~/plugins';\r\nimport type { ReadonlyOptions } from '~/options';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarHandlePointerInteraction: (event: PointerEvent) => void\r\n): ScrollbarsSetupEvents => {\r\n  return (scrollbarStructure, scrollbarsAddRemoveClass, isHorizontal) => {\r\n    const {\r\n      _host,\r\n      _viewport,\r\n      _viewportIsTarget,\r\n      _scrollOffsetElement,\r\n      _documentElm,\r\n      _removeScrollObscuringStyles,\r\n    } = structureSetupElements;\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [scrollSnapScrollTransitionTimeout, clearScrollSnapScrollTransitionTimeout] =\r\n      selfClearTimeout(444);\r\n    const scrollOffsetElementScrollBy = (coordinates: XY<number>) => {\r\n      isFunction(_scrollOffsetElement.scrollBy) &&\r\n        _scrollOffsetElement.scrollBy({\r\n          behavior: 'smooth',\r\n          left: coordinates.x,\r\n          top: coordinates.y,\r\n        });\r\n    };\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointercancel lostpointercapture';\r\n      const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY';\r\n      const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n      const leftTopKey = isHorizontal ? 'left' : 'top';\r\n      const whKey = isHorizontal ? 'w' : 'h';\r\n      const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = getOffsetSize(_track)[whKey] - getOffsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n      const pointerdownCleanupFns: Array<() => void> = [];\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const dragClickScrollOption = scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'];\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          dragClickScrollOption &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        if (continuePointerDown) {\r\n          runEachAndClear(pointerdownCleanupFns);\r\n          clearScrollSnapScrollTransitionTimeout();\r\n\r\n          const instantClickScroll =\r\n            !isDragScroll && (pointerDownEvent.shiftKey || dragClickScrollOption === 'instant');\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              getOffsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElementScroll(_scrollOffsetElement)[xyKey],\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            runEachAndClear(pointerupCleanupFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n          const nonAnimatedScroll = isDragScroll || instantClickScroll;\r\n          const revertScrollObscuringStyles = _removeScrollObscuringStyles();\r\n\r\n          const pointerupCleanupFns = [\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            nonAnimatedScroll &&\r\n              addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) =>\r\n                moveHandleRelative(\r\n                  startOffset + (pointerMoveEvent[clientXYKey] - pointerDownOffset)\r\n                )\r\n              ),\r\n            nonAnimatedScroll &&\r\n              (() => {\r\n                const withoutSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n                revertScrollObscuringStyles();\r\n                const withSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n                const snapScrollDiff = {\r\n                  x: withSnapScrollOffset.x - withoutSnapScrollOffset.x,\r\n                  y: withSnapScrollOffset.y - withoutSnapScrollOffset.y,\r\n                };\r\n\r\n                if (mathAbs(snapScrollDiff.x) > 3 || mathAbs(snapScrollDiff.y) > 3) {\r\n                  _removeScrollObscuringStyles();\r\n                  scrollElementTo(_scrollOffsetElement, withoutSnapScrollOffset);\r\n                  scrollOffsetElementScrollBy(snapScrollDiff);\r\n                  scrollSnapScrollTransitionTimeout(revertScrollObscuringStyles);\r\n                }\r\n              }),\r\n          ];\r\n\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n            if (animateClickScroll) {\r\n              const stopClickScrollAnimation = animateClickScroll(\r\n                moveHandleRelative,\r\n                startOffset,\r\n                handleLength,\r\n                (stopped) => {\r\n                  // if the scroll animation doesn't continue with a press\r\n                  if (stopped) {\r\n                    revertScrollObscuringStyles();\r\n                  } else {\r\n                    push(pointerupCleanupFns, revertScrollObscuringStyles);\r\n                  }\r\n                }\r\n              );\r\n\r\n              push(pointerupCleanupFns, stopClickScrollAnimation);\r\n              push(pointerdownCleanupFns, bind(stopClickScrollAnimation, true));\r\n            }\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_handle, 'pointermove pointerleave', scrollbarHandlePointerInteraction),\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      // focus viewport when clicking on a scrollbar (mouse only)\r\n      !_viewportIsTarget &&\r\n        addEventListener(_scrollbar, 'mousedown', () => {\r\n          const focusedElement = getFocusedElement();\r\n          if (\r\n            hasAttr(focusedElement, dataAttributeViewport) ||\r\n            hasAttr(focusedElement, dataAttributeHost) ||\r\n            focusedElement === document.body\r\n          ) {\r\n            setT(bind(focusElement, _viewport), 25);\r\n          }\r\n        }),\r\n      // propagate wheel events to viewport when mouse is over scrollbar\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            scrollOffsetElementScrollBy({\r\n              x: deltaX,\r\n              y: deltaY,\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      // solve problem of interaction causing click events\r\n      addEventListener(\r\n        _scrollbar,\r\n        'pointerdown',\r\n        // stopPropagation for stopping event propagation (causing click listeners to be invoked)\r\n        // preventDefault to prevent the pointer to cause any actions (e.g. releasing mouse button over an <a> tag causes an navigation)\r\n        bind(addEventListener, _documentElm, 'click', stopAndPrevent, {\r\n          _once: true,\r\n          _capture: true,\r\n          _passive: false,\r\n        }),\r\n        { _capture: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      clearScrollSnapScrollTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n","import {\r\n  bind,\r\n  noop,\r\n  addEventListener,\r\n  push,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  strScroll,\r\n  strVisible,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '~/classnames';\r\nimport type { OverflowBehavior, ReadonlyOptions } from '~/options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let mouseInHost: boolean | undefined;\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideIsNever: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n\r\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\r\n\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [autoHideInstantInteractionTimeout, clearAutoHideInstantInteractionTimeout] =\r\n    selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoHideTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(\r\n      options,\r\n      structureSetupElements,\r\n      structureSetupState,\r\n      (event) =>\r\n        isHoverablePointerType(event) &&\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        manageScrollbarsAutoHideInstantInteraction()\r\n    )\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollCoordinates,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoHideTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n  const manageScrollbarsAutoHideInstantInteraction = () => {\r\n    if (autoHideIsLeave ? !mouseInHost : !autoHideIsNever) {\r\n      manageScrollbarsAutoHide(true);\r\n      autoHideInstantInteractionTimeout(() => {\r\n        manageScrollbarsAutoHide(false);\r\n      });\r\n    }\r\n  };\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      autoHideIsLeave && manageScrollbarsAutoHide(true);\r\n    }\r\n  };\r\n  const destroyFns: (() => void)[] = [\r\n    clearAutoHideTimeout,\r\n    clearAutoHideInstantInteractionTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      isHoverablePointerType(event) &&\r\n        autoHideIsMove &&\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const {\r\n        _overflowEdgeChanged,\r\n        _overflowAmountChanged,\r\n        _overflowStyleChanged,\r\n        _scrollCoordinatesChanged,\r\n      } = _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const [overflow, overflowChanged] = _checkOption('overflow');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged ||\r\n        _overflowAmountChanged ||\r\n        _scrollCoordinatesChanged ||\r\n        _directionChanged ||\r\n        _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged || overflowChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (\r\n        overflowBehavior: OverflowBehavior,\r\n        overflowStyle: OverflowStyle,\r\n        isHorizontal: boolean\r\n      ) => {\r\n        const isVisible =\r\n          overflowBehavior.includes(strScroll) &&\r\n          (visibility === strVisible || (visibility === 'auto' && overflowStyle === strScroll));\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideIsNever = autoHide === 'never';\r\n        manageScrollbarsAutoHide(autoHideIsNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, !!clickScroll);\r\n      }\r\n\r\n      // always update scrollbar visibility before scrollbar size\r\n      // the scrollbar size is influenced whether both or just one scrollbar is visible (because of the corner element)\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(overflow.x, _overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(overflow.y, _overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      // always update scrollbar sizes after the visibility\r\n      if (updateScrollbars) {\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsScrollbarOffset();\r\n        _scrollCoordinatesChanged && _refreshScrollbarsScrollCoordinates();\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  contents,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  removeAttrs,\r\n  hasAttrClass,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n  addAttrClass,\r\n  addRemoveAttrClass,\r\n  setAttrs,\r\n  getAttr,\r\n  isBodyElement,\r\n  getFocusedElement,\r\n  wnd,\r\n  focusElement,\r\n  stopAndPrevent,\r\n  getOffsetSize,\r\n  getScrollSize,\r\n  getStyles,\r\n  strOverflowX,\r\n  strOverflowY,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n  dataAttributeHtmlBody,\r\n  dataValueHostIsHost,\r\n  dataValueViewportScrolling,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n} from '~/initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport { overflowIsVisible } from './structureSetup.utils';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  _originalScrollOffsetElement: HTMLElement;\r\n  // ctx ----\r\n  _isBody: boolean;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _windowElm: () => Window;\r\n  _viewportHasClass: (viewportAttributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) => () => void;\r\n  _removeScrollObscuringStyles: () => () => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isBody = isBodyElement(targetElement);\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const getDocumentWindow = () => ownerDocument.defaultView || wnd;\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const elementHasOverflow = (elm: HTMLElement) => {\r\n    const offsetSize = getOffsetSize(elm);\r\n    const scrollSize = getScrollSize(elm);\r\n    const overflowX = getStyles(elm, strOverflowX);\r\n    const overflowY = getStyles(elm, strOverflowY);\r\n\r\n    return (\r\n      (scrollSize.w - offsetSize.w > 0 && !overflowIsVisible(overflowX)) ||\r\n      (scrollSize.h - offsetSize.h > 0 && !overflowIsVisible(overflowY))\r\n    );\r\n  };\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // viewport element has higher priority and content element will not be generated\r\n  // will act the same way as initialization: `{ elements: { viewport, content: false } }`\r\n  const viewportIsContent = !viewportIsTarget && possibleViewportElement === possibleContentElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : possibleViewportElement;\r\n  const hostElement = viewportIsTargetBody ? viewportElement : targetElement;\r\n  const paddingElement =\r\n    !viewportIsTarget &&\r\n    dynamicInitializationElement(createNewDiv, defaultPaddingInitialization, paddingInitialization);\r\n  const contentElement = !viewportIsContent && possibleContentElement;\r\n  const generatedElements = [contentElement, viewportElement, paddingElement, hostElement].map(\r\n    (elm) => isHTMLElement(elm) && !parent(elm) && elm\r\n  );\r\n  const elementIsGenerated = (elm: HTMLElement | false) => elm && inArray(generatedElements, elm);\r\n  const originalNonBodyScrollOffsetElement =\r\n    !elementIsGenerated(viewportElement) && elementHasOverflow(viewportElement)\r\n      ? viewportElement\r\n      : targetElement;\r\n  const scrollOffsetElement = viewportIsTargetBody ? docElement : viewportElement;\r\n  const scrollEventElement = viewportIsTargetBody ? ownerDocument : viewportElement;\r\n\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding: paddingElement,\r\n    _content: contentElement,\r\n    _scrollOffsetElement: scrollOffsetElement,\r\n    _scrollEventElement: scrollEventElement,\r\n    _originalScrollOffsetElement: isBody ? docElement : originalNonBodyScrollOffsetElement,\r\n    _documentElm: ownerDocument,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _windowElm: getDocumentWindow,\r\n    _viewportHasClass: (viewportAttributeClassName: string) =>\r\n      hasAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName),\r\n    _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) =>\r\n      addRemoveAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName, add),\r\n    _removeScrollObscuringStyles: () =>\r\n      addRemoveAttrClass(\r\n        scrollOffsetElement,\r\n        dataAttributeViewport,\r\n        dataValueViewportScrolling,\r\n        true\r\n      ),\r\n  };\r\n  const { _target, _host, _padding, _viewport, _content } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttrs(_host, [dataAttributeHost, dataAttributeInitialize]);\r\n      removeAttrs(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttrs(docElement, [dataAttributeInitialize, dataAttributeHost]);\r\n      }\r\n    },\r\n  ];\r\n  let targetContents = contents(\r\n    [_content, _viewport, _padding, _host, _target].find((elm) => elm && !elementIsGenerated(elm))\r\n  );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    const docWnd = getDocumentWindow();\r\n    const initActiveElm = getFocusedElement();\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n    // wrapping / unwrapping will cause the focused element to blur, this should prevent those events to surface\r\n    const prepareWrapUnwrapFocus = (activeElement: Element | false | null | undefined) =>\r\n      addEventListener(activeElement, 'focusin focusout focus blur', stopAndPrevent, {\r\n        _capture: true,\r\n        _passive: false,\r\n      });\r\n    const tabIndexStr = 'tabindex';\r\n    const originalViewportTabIndex = getAttr(_viewport, tabIndexStr);\r\n    const undoInitWrapUndwrapFocus = prepareWrapUnwrapFocus(initActiveElm);\r\n    setAttrs(_host, dataAttributeHost, viewportIsTarget ? '' : dataValueHostIsHost);\r\n    setAttrs(_padding, dataAttributePadding, '');\r\n    setAttrs(_viewport, dataAttributeViewport, '');\r\n    setAttrs(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      setAttrs(_viewport, tabIndexStr, originalViewportTabIndex || '-1');\r\n      isBody && setAttrs(docElement, dataAttributeHtmlBody, '');\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, [\r\n      undoInitWrapUndwrapFocus,\r\n      () => {\r\n        const destroyActiveElm = getFocusedElement();\r\n        const viewportIsGenerated = elementIsGenerated(_viewport);\r\n        // if the focused element is viewport and viewport will be destroyed shift the focus to target\r\n        // otherwise keep the focused element\r\n        const destroyFocusElement =\r\n          viewportIsGenerated && destroyActiveElm === _viewport ? _target : destroyActiveElm;\r\n        const undoDestroyWrapUndwrapFocus = prepareWrapUnwrapFocus(destroyFocusElement);\r\n        removeAttrs(_padding, dataAttributePadding);\r\n        removeAttrs(_content, dataAttributeContent);\r\n        removeAttrs(_viewport, dataAttributeViewport);\r\n        isBody && removeAttrs(docElement, dataAttributeHtmlBody);\r\n        originalViewportTabIndex\r\n          ? setAttrs(_viewport, tabIndexStr, originalViewportTabIndex)\r\n          : removeAttrs(_viewport, tabIndexStr);\r\n\r\n        elementIsGenerated(_content) && unwrap(_content);\r\n        viewportIsGenerated && unwrap(_viewport);\r\n        elementIsGenerated(_padding) && unwrap(_padding);\r\n        focusElement(destroyFocusElement);\r\n        undoDestroyWrapUndwrapFocus();\r\n      },\r\n    ]);\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      addAttrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden);\r\n      push(destroyFns, bind(removeAttrs, _viewport, dataAttributeViewport));\r\n    }\r\n\r\n    // keep the original focused element focused except when\r\n    // the target is body and viewport is not target, then shift the focus to the viewport element\r\n    focusElement(\r\n      !viewportIsTarget && isBody && initActiveElm === _target && docWnd.top === docWnd\r\n        ? _viewport\r\n        : initActiveElm\r\n    );\r\n    undoInitWrapUndwrapFocus();\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n","import { setStyles, strHeight } from '~/support';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged = _content && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      setStyles(_content, {\r\n        [strHeight]: _heightIntrinsic && '100%',\r\n      });\r\n    }\r\n  };\r\n","import {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  setStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || _contentMutation;\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative && `calc(100% + ${paddingHorizontal}px)`,\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      setStyles(_padding || _viewport, paddingStyle);\r\n      setStyles(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  getScrollSize,\r\n  getFractionalSize,\r\n  equalWH,\r\n  getClientSize,\r\n  equalXY,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  getWindowSize,\r\n  addRemoveAttrClass,\r\n  capitalizeFirstLetter,\r\n  setStyles,\r\n  strVisible,\r\n  strHidden,\r\n  keys,\r\n  strScroll,\r\n  scrollElementTo,\r\n  getElementScroll,\r\n  sanitizeScrollCoordinates,\r\n  getStyles,\r\n  equal,\r\n  getZeroScrollCoordinates,\r\n  hasDimensions,\r\n  addEventListener,\r\n  stopPropagation,\r\n  rAF,\r\n  hasAttrClass,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataValueNoClipping,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataValueViewportOverflowXPrefix,\r\n  dataValueViewportOverflowYPrefix,\r\n  dataValueViewportNoContent,\r\n  dataValueViewportMeasuring,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { ScrollCoordinates, WH, XY } from '~/support';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins/scrollbarsHidingPlugin';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\nimport {\r\n  createViewportOverflowState,\r\n  getShowNativeOverlaidScrollbars,\r\n  overflowIsVisible,\r\n} from '../structureSetup.utils';\r\n\r\ninterface FlowDirectionStyles {\r\n  display?: string;\r\n  direction?: string;\r\n  flexDirection?: string;\r\n  writingMode?: string;\r\n}\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  structureSetupState\r\n) => {\r\n  const env = getEnvironment();\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportIsTarget,\r\n    _scrollEventElement,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportAddRemoveClass,\r\n    _windowElm,\r\n  } = structureSetupElements;\r\n  const { _nativeScrollbarsHiding } = env;\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n  const max0 = bind(mathMax, 0);\r\n  const flowDirectionCanBeNonDefaultMap: Record<\r\n    keyof FlowDirectionStyles,\r\n    (styleValue: string) => boolean\r\n  > = {\r\n    display: () => false,\r\n    direction: (directionStyle) => directionStyle !== 'ltr',\r\n    flexDirection: (flexDirectionStyle) => flexDirectionStyle.endsWith('-reverse'),\r\n    writingMode: (writingModeStyle) => writingModeStyle !== 'horizontal-tb',\r\n  };\r\n  const flowDirectionStyleArr = keys(flowDirectionCanBeNonDefaultMap) as Array<\r\n    keyof FlowDirectionStyles\r\n  >;\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const partialXYOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: {},\r\n  };\r\n\r\n  const setMeasuringMode = (active: boolean) => {\r\n    // viewportIsTargetBody never needs measuring\r\n    _viewportAddRemoveClass(dataValueViewportMeasuring, !viewportIsTargetBody && active);\r\n  };\r\n\r\n  const getMeasuredScrollCoordinates = (flowDirectionStyles: FlowDirectionStyles) => {\r\n    const flowDirectionCanBeNonDefault = flowDirectionStyleArr.some((styleName) => {\r\n      const styleValue = flowDirectionStyles[styleName];\r\n      return styleValue && flowDirectionCanBeNonDefaultMap[styleName](styleValue);\r\n    });\r\n\r\n    // if the direction can not be non-default return default scroll coordinates (only the sign of the numbers matters)\r\n    if (!flowDirectionCanBeNonDefault) {\r\n      return {\r\n        _start: { x: 0, y: 0 },\r\n        _end: { x: 1, y: 1 },\r\n      };\r\n    }\r\n\r\n    setMeasuringMode(true);\r\n\r\n    const originalScrollOffset = getElementScroll(_scrollOffsetElement);\r\n    const removeNoContent = _viewportAddRemoveClass(dataValueViewportNoContent, true);\r\n    const removeScrollBlock = addEventListener(\r\n      _scrollEventElement,\r\n      strScroll,\r\n      (event) => {\r\n        const scrollEventScrollOffset = getElementScroll(_scrollOffsetElement);\r\n        // if scroll offset didnt change\r\n        if (\r\n          event.isTrusted &&\r\n          scrollEventScrollOffset.x === originalScrollOffset.x &&\r\n          scrollEventScrollOffset.y === originalScrollOffset.y\r\n        ) {\r\n          stopPropagation(event);\r\n        }\r\n      },\r\n      {\r\n        _capture: true,\r\n        _once: true,\r\n      }\r\n    );\r\n\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      x: 0,\r\n      y: 0,\r\n    });\r\n    removeNoContent();\r\n\r\n    const _start = getElementScroll(_scrollOffsetElement);\r\n    const scrollSize = getScrollSize(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      x: scrollSize.w,\r\n      y: scrollSize.h,\r\n    });\r\n\r\n    const tmp = getElementScroll(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, {\r\n      // if tmp is very close start there porbably wasn't any scroll happening so scroll again in different direction\r\n      x: tmp.x - _start.x < 1 && -scrollSize.w,\r\n      y: tmp.y - _start.y < 1 && -scrollSize.h,\r\n    });\r\n\r\n    const _end = getElementScroll(_scrollOffsetElement);\r\n    scrollElementTo(_scrollOffsetElement, originalScrollOffset);\r\n    rAF(() => removeScrollBlock());\r\n\r\n    return {\r\n      _start,\r\n      _end,\r\n    };\r\n  };\r\n  const getOverflowAmount = (\r\n    viewportScrollSize: WH<number>,\r\n    viewportClientSize: WH<number>\r\n  ): WH<number> => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(getFractionalSize, _viewport)\r\n  );\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(getScrollSize, _viewport));\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n  const [updateHasOverflowCache] = createCache<Partial<XY<boolean>>>(partialXYOptions);\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n  const [updateOverflowStyleCache] = createCache<Partial<XY<OverflowStyle>>>(partialXYOptions);\r\n  const [updateFlowDirectionStyles] = createCache<FlowDirectionStyles>(\r\n    {\r\n      _equal: (currVal, newValu) => equal(currVal, newValu, flowDirectionStyleArr),\r\n      _initialValue: {},\r\n    },\r\n    () => (hasDimensions(_viewport) ? getStyles(_viewport, flowDirectionStyleArr) : {})\r\n  );\r\n  const [updateMeasuredScrollCoordinates, getCurrentMeasuredScrollCoordinates] =\r\n    createCache<ScrollCoordinates>({\r\n      _equal: (currVal, newVal) =>\r\n        equalXY(currVal._start, newVal._start) && equalXY(currVal._end, newVal._end),\r\n      _initialValue: getZeroScrollCoordinates(),\r\n    });\r\n\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const createViewportOverflowStyleClassName = (\r\n    overflowStyle: OverflowStyle,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const prefix = isHorizontal\r\n      ? dataValueViewportOverflowXPrefix\r\n      : dataValueViewportOverflowYPrefix;\r\n    return `${prefix}${capitalizeFirstLetter(overflowStyle)}`;\r\n  };\r\n  const setViewportOverflowStyle = (viewportOverflowStyle: XY<OverflowStyle>) => {\r\n    // `createAllOverflowStyleClassNames` and `allOverflowStyleClassNames` could be one scope further up but would increase bundle size\r\n    const createAllOverflowStyleClassNames = (isHorizontal?: boolean) =>\r\n      ([strVisible, strHidden, strScroll] as OverflowStyle[]).map((style) =>\r\n        createViewportOverflowStyleClassName(style, isHorizontal)\r\n      );\r\n    const allOverflowStyleClassNames = createAllOverflowStyleClassNames(true)\r\n      .concat(createAllOverflowStyleClassNames())\r\n      .join(' ');\r\n\r\n    _viewportAddRemoveClass(allOverflowStyleClassNames);\r\n    _viewportAddRemoveClass(\r\n      (keys(viewportOverflowStyle) as Array<keyof typeof viewportOverflowStyle>)\r\n        .map((axis) =>\r\n          createViewportOverflowStyleClassName(viewportOverflowStyle[axis], axis === 'x')\r\n        )\r\n        .join(' '),\r\n      true\r\n    );\r\n  };\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const { _sizeChanged, _contentMutation, _directionChanged, _appear, _scrollbarSizeChanged } =\r\n      _observersUpdateHints || {};\r\n    const scrollbarsHidingPluginViewportArrangement =\r\n      scrollbarsHidingPlugin &&\r\n      scrollbarsHidingPlugin._viewportArrangement(\r\n        structureSetupElements,\r\n        structureSetupState,\r\n        _observersState,\r\n        env,\r\n        _checkOption\r\n      );\r\n\r\n    const { _arrangeViewport, _undoViewportArrange, _hideNativeScrollbars } =\r\n      scrollbarsHidingPluginViewportArrangement || {};\r\n\r\n    const [showNativeOverlaidScrollbars, showNativeOverlaidScrollbarsChanged] =\r\n      getShowNativeOverlaidScrollbars(_checkOption, env);\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n\r\n    const viewportChanged =\r\n      true ||\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(dataValueViewportScrollbarHidden, !showNativeOverlaidScrollbars);\r\n    }\r\n\r\n    if (viewportChanged) {\r\n      if (hasAttrClass(_host, dataAttributeHost, dataValueNoClipping)) {\r\n        setMeasuringMode(true);\r\n      }\r\n\r\n      const [redoViewportArrange] = _undoViewportArrange ? _undoViewportArrange() : [];\r\n\r\n      const [sizeFraction] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = getClientSize(_viewport);\r\n      const windowInnerSize = viewportIsTargetBody && getWindowSize(_windowElm());\r\n      const overflowAmountScrollSize = {\r\n        w: max0(viewportScrollSize.w + sizeFraction.w),\r\n        h: max0(viewportScrollSize.h + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (windowInnerSize\r\n            ? windowInnerSize.w\r\n            : viewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (windowInnerSize\r\n            ? windowInnerSize.h\r\n            : viewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const [hasOverflow, hasOverflowChanged] = updateHasOverflowCache({\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    });\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      viewportChanged;\r\n    const viewportOverflowState = createViewportOverflowState(hasOverflow, overflow);\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      viewportOverflowState._overflowStyle\r\n    );\r\n    const [flowDirectionStyles, flowDirectionStylesChanged] = updateFlowDirectionStyles(_force);\r\n\r\n    const adjustMeasuredScrollCoordinates =\r\n      _directionChanged || _appear || flowDirectionStylesChanged || hasOverflowChanged || _force;\r\n    const [scrollCoordinates, scrollCoordinatesChanged] = adjustMeasuredScrollCoordinates\r\n      ? updateMeasuredScrollCoordinates(getMeasuredScrollCoordinates(flowDirectionStyles), _force)\r\n      : getCurrentMeasuredScrollCoordinates();\r\n\r\n    if (adjustViewportStyle) {\r\n      overflowStyleChanged && setViewportOverflowStyle(viewportOverflowState._overflowStyle);\r\n\r\n      if (_hideNativeScrollbars && _arrangeViewport) {\r\n        setStyles(\r\n          _viewport,\r\n          _hideNativeScrollbars(\r\n            viewportOverflowState,\r\n            _observersState,\r\n            _arrangeViewport(viewportOverflowState, viewportScrollSize, sizeFraction)\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    setMeasuringMode(false);\r\n\r\n    addRemoveAttrClass(_host, dataAttributeHost, dataValueNoClipping, removeClipping);\r\n    addRemoveAttrClass(_padding, dataAttributePadding, dataValueNoClipping, removeClipping);\r\n\r\n    assignDeep(structureSetupState, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n      _scrollCoordinates: sanitizeScrollCoordinates(scrollCoordinates, overflowAmount),\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n      _scrollCoordinatesChanged: scrollCoordinatesChanged || overflowAmountChanged,\r\n      _scrolled: adjustMeasuredScrollCoordinates,\r\n    };\r\n  };\r\n};\r\n","import { getEnvironment } from '~/environment';\r\nimport {\r\n  assignDeep,\r\n  each,\r\n  getElementScroll,\r\n  getZeroScrollCoordinates,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  type TRBL,\r\n  type XY,\r\n} from '~/support';\r\nimport type { ScrollCoordinates } from '~/support';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n  _scrollCoordinates: ScrollCoordinates;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n  _scrollCoordinatesChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n    _scrollCoordinates: getZeroScrollCoordinates(),\r\n  };\r\n  const { _target, _scrollOffsetElement, _viewportIsTarget, _removeScrollObscuringStyles } =\r\n    elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange;\r\n      const scrollOffset = adjustScrollOffset && getElementScroll(_scrollOffsetElement);\r\n      const revertScrollObscuringStyles = scrollOffset && _removeScrollObscuringStyles();\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      revertScrollObscuringStyles && revertScrollObscuringStyles();\r\n      !_viewportIsTarget && scrollElementTo(_target, 0);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  bind,\r\n  getElementScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { createOptionCheck } from '~/options';\r\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { DeepReadonly } from '~/typings';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  isDestroyed: () => boolean,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  let cacheAndOptionsInitialized = false;\r\n  const getCurrentOption = createOptionCheck(options, {});\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    getCurrentOption,\r\n    (observersUpdateHints) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    if (isDestroyed()) {\r\n      return false;\r\n    }\r\n\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce || !cacheAndOptionsInitialized;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    cacheAndOptionsInitialized = true;\r\n\r\n    changed &&\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _originalScrollOffsetElement, _scrollOffsetElement, _removeScrollObscuringStyles } =\r\n        structureSetupElements;\r\n      const initialScroll = getElementScroll(_originalScrollOffsetElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n      const revertScrollObscuringStyles = _removeScrollObscuringStyles();\r\n\r\n      scrollElementTo(_scrollOffsetElement, initialScroll);\r\n      revertScrollObscuringStyles();\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createSetups } from '~/setups';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from '~/plugins';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from '~/plugins';\r\nimport type { Initialization, InitializationTarget, PartialInitialization } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { setNonce } from './nonce';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n  /**\r\n   * Sets the nonce attribute for inline styles.\r\n   */\r\n  nonce(newNonce: string | undefined): void;\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** The scroll coordinates of the viewport. */\r\n  scrollCoordinates: {\r\n    /** The start (origin) scroll coordinates for each axis. */\r\n    start: XY<number>;\r\n    /** The end scroll coordinates for each axis. */\r\n    end: XY<number>;\r\n  };\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        () => destroyed,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const {\r\n            _overflowEdgeChanged,\r\n            _overflowAmountChanged,\r\n            _overflowStyleChanged,\r\n            _scrollCoordinatesChanged,\r\n          } = _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                scrollCoordinatesChanged: !!_scrollCoordinatesChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeInstanceEvents(name, listener);\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n          _scrollCoordinates,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            scrollCoordinates: {\r\n              start: _scrollCoordinates._start,\r\n              end: _scrollCoordinates._end,\r\n            },\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update();\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\nOverlayScrollbars.nonce = setNonce;\r\n"],"names":["createCache","options","update","_initialValue","_equal","_alwaysUpdateValues","_value","_previous","cacheUpdateContextual","newValue","force","curr","newVal","changed","cacheUpdateIsolated","getCurrentCache","isBrowser","window","HTMLElement","document","wnd","mathMax","Math","max","mathMin","min","mathRound","round","mathAbs","abs","mathSign","sign","cAF","cancelAnimationFrame","rAF","requestAnimationFrame","setT","setTimeout","clearT","clearTimeout","getApi","name","undefined","MutationObserverConstructor","IntersectionObserverConstructor","ResizeObserverConstructor","scrollT","isUndefined","obj","isNull","type","Object","prototype","toString","call","replace","toLowerCase","isNumber","isString","isBoolean","isFunction","isArray","Array","isObject","isArrayLike","length","lengthCorrectFormat","isPlainObject","constructor","isHTMLElement","isElement","Element","animationCurrentTime","performance","now","animateNumber","from","to","duration","onFrame","easing","animationFrameId","timeStart","finalDuration","frame","complete","timeNow","timeElapsed","stopAnimation","percent","progress","animationCompleted","each","source","callback","i","keys","key","inArray","arr","item","indexOf","concat","a","b","push","array","items","arrayIsSingleItem","apply","createOrKeepArray","value","isEmptyArray","deduplicateArray","Set","runEachAndClear","args","keep","runFn","fn","strPaddingTop","strPaddingRight","strPaddingLeft","strPaddingBottom","strMarginLeft","strMarginRight","strMarginBottom","strOverflowX","strOverflowY","strWidth","strHeight","strVisible","strHidden","strScroll","capitalizeFirstLetter","str","finalStr","String","toUpperCase","slice","equal","props","propMutation","result","prop","compareA","compareB","equalWH","equalXY","equalTRBL","noop","bind","_len","arguments","_key","selfClearTimeout","timeout","id","setTFn","clearTFn","debounce","functionToDebounce","_ref","_timeout","_maxDelay","_leading","_mergeParams","maxTimeoutId","prevArguments","latestArguments","leadingInvoked","clear","invokeFunctionToDebounce","this","mergeParms","flush","debouncedFn","finalTimeout","hasTimeout","finalMaxWait","hasMaxWait","setTimeoutFn","clearTimeoutFn","mergeParamsResult","invokedArgs","boundInvoke","timeoutId","_flush","hasOwnProperty","assignDeep","target","object1","object2","object3","object4","object5","object6","sources","_","copy","copyIsArray","src","clone","removeUndefinedProperties","deep","isEmptyObject","capNumber","number","getDomTokensArray","tokens","split","filter","token","getAttr","elm","attrName","getAttribute","hasAttr","hasAttribute","setAttrs","attrNames","setAttribute","removeAttrs","removeAttribute","domTokenListAttr","initialArr","setElmAttr","domTokenListOperation","operationTokens","operation","initialArrSet","join","_remove","removeTokens","_add","addTokens","_has","hasTokens","tokenSet","reduce","boolean","includes","removeAttrClass","addAttrClass","addRemoveAttrClass","add","hasAttrClass","createDomTokenListClass","removeClass","className","addClass","find","selector","rootElm","querySelectorAll","findFirst","querySelector","is","matches","isBodyElement","contents","childNodes","parent","parentElement","closest","getFocusedElement","doc","activeElement","liesBetween","highBoundarySelector","deepBoundarySelector","closestHighBoundaryElm","closestDeepBoundaryElm","deepBoundaryIsValid","removeElements","nodes","node","parentElm","removeChild","appendChildren","children","child","appendChild","createDiv","classNames","div","createElement","createDOM","html","createdDiv","innerHTML","trim","getCSSVal","computedStyle","getPropertyValue","validFiniteNumber","notNaN","isFinite","parseToZeroOrNumber","parseFloat","roundCssNumber","numberToCssPx","setStyles","styles","rawValue","elmStyle","style","setProperty","_unused","getStyles","pseudoElm","getSingleStyle","getStylesResult","getComputedStyle","topRightBottomLeft","propertyPrefix","propertySuffix","finalPrefix","finalSuffix","top","right","bottom","left","t","r","l","getTrasformTranslateValue","isHorizontal","x","y","elementHasDimensions","offsetWidth","offsetHeight","getClientRects","zeroObj","w","h","getElmWidthHeightProperty","property","getWindowSize","customWnd","getOffsetSize","getClientSize","getScrollSize","getFractionalSize","cssWidth","cssHeight","getBoundingClientRect","hasDimensions","domRectHasDimensions","rect","domRectAppeared","currContentRect","prevContentRect","rectHasDimensions","rectHadDimensions","removeEventListener","eventNames","listener","capture","eventName","addEventListener","passive","_passive","_capture","once","_once","nativeOptions","map","finalListener","evt","stopPropagation","preventDefault","stopAndPrevent","scrollElementTo","position","scrollLeft","scrollTop","getElementScroll","getZeroScrollCoordinates","_start","_end","sanitizeScrollCoordinates","rawScrollCoordinates","overflowAmount","sanitizeAxis","start","end","amount","newStart","newEnd","startAbs","endAbs","_sanitizeAxis","startX","endX","_sanitizeAxis2","startY","endY","isDefaultDirectionScrollCoordinates","_ref2","getAxis","getScrollCoordinatesPercent","_ref3","currentScroll","current","focusElement","element","focus","preventScroll","manageListener","createEventListenerHub","initialEventListeners","events","Map","removeEvent","eventSet","get","currListener","forEach","addEvent","nameOrEventListeners","listenerOrPure","set","eventListenerKeys","offFns","eventListener","triggerEvent","event","opsStringify","JSON","stringify","val","getPropByPath","path","o","defaultOptions","paddingAbsolute","showNativeOverlaidScrollbars","elementEvents","attributes","ignoreMutation","overflow","scrollbars","theme","visibility","autoHide","autoHideDelay","autoHideSuspend","dragScroll","clickScroll","pointers","getOptionsDiff","currOptions","newOptions","diff","optionsKeys","optionKey","currOptionValue","newOptionValue","isDiff","createOptionCheck","changedOptions","dataAttributePrefix","classNameEnvironment","classNameEnvironmentScrollbarHidden","dataAttributeInitialize","dataValueNoClipping","dataAttributeHtmlBody","dataAttributeHost","dataValueHostIsHost","dataAttributeViewport","dataValueViewportOverflowXPrefix","dataValueViewportOverflowYPrefix","dataValueViewportArrange","dataValueViewportMeasuring","dataValueViewportScrolling","dataValueViewportScrollbarHidden","dataValueViewportNoContent","dataAttributePadding","dataAttributeContent","classNameSizeObserver","classNameSizeObserverAppear","classNameSizeObserverListener","classNameSizeObserverListenerScroll","classNameSizeObserverListenerItem","classNameSizeObserverListenerItemFinal","classNameTrinsicObserver","classNameScrollbarThemeNone","classNameScrollbar","classNameScrollbarRtl","classNameScrollbarHorizontal","classNameScrollbarVertical","classNameScrollbarTrack","classNameScrollbarHandle","classNameScrollbarVisible","classNameScrollbarCornerless","classNameScrollbarInteraction","classNameScrollbarUnusable","classNameScrollbarAutoHide","classNameScrollbarAutoHideHidden","classNameScrollbarWheel","classNameScrollbarTrackInteractive","classNameScrollbarHandleInteractive","nonce","getNonce","setNonce","newNonce","environmentInstance","createEnvironment","getNativeScrollbarSize","measureElm","measureElmChild","body","cSize","oSize","fSize","getNativeScrollbarsHiding","testElm","revertClass","envStyle","envDOM","envElm","envChildElm","firstChild","styleElm","lastChild","_createEventListenerH","_createCache","updateNativeScrollbarSizeCache","getNativeScrollbarSizeCache","_getNativeScrollbarSi","nativeScrollbarsSize","nativeScrollbarsHiding","nativeScrollbarsOverlaid","staticDefaultInitialization","elements","host","padding","viewport","content","slot","cancel","staticDefaultOptions","getDefaultOptions","getDefaultInitialization","env","_nativeScrollbarsSize","_nativeScrollbarsOverlaid","_nativeScrollbarsHiding","_scrollTimeline","_addResizeListener","_getDefaultInitialization","_setDefaultInitialization","newInitializationStrategy","_getDefaultOptions","_setDefaultOptions","newDefaultOptions","_staticDefaultInitialization","_staticDefaultOptions","matchMedia","addZoomListener","onZoom","media","devicePixelRatio","_updateNativeScrollba","updatedNativeScrollbarSize","nativeScrollbarSizeChanged","getEnvironment","resolveInitialization","staticInitializationElement","fallbackStaticInitializationElement","defaultStaticInitializationElement","staticInitializationElementValue","staticInitialization","resolvedInitialization","dynamicInitializationElement","fallbackDynamicInitializationElement","defaultDynamicInitializationElement","dynamicInitializationElementValue","dynamicInitialization","cancelInitialization","isBody","cancelInitializationValue","_getEnvironment","_getDefaultInitializa","defaultNativeScrollbarsOverlaid","defaultbody","resolvedNativeScrollbarsOverlaid","resolvedDocumentScrollingElement","finalNativeScrollbarsOverlaid","finalDocumentScrollingElement","targetInstanceMap","WeakMap","addInstance","osInstance","removeInstance","delete","getInstance","createEventContentChange","eventContentChange","destroyed","destroy","updateElements","getElements","eventElmList","entries","isTargetChild","contains","removeListener","createDOMObserver","isContentObserver","isConnected","_attributes","_styleChangingAttributes","_eventContentChange","_nestedTargetSelector","_ignoreTargetChange","_ignoreContentChange","debouncedEventContentChange","_createEventContentCh","destroyEventContentChange","updateEventContentChangeElements","finalAttributes","finalStyleChangingAttributes","observedAttributes","observerCallback","fromRecords","mutations","ignoreTargetChange","ignoreContentChange","totalChangedNodes","targetChangedAttrs","targetStyleChanged","contentChanged","mutation","attributeName","mutationTarget","oldValue","addedNodes","removedNodes","isAttributesType","isChildListType","targetIsMutationTarget","isAttrChange","attributeValue","attributeChanged","styleChangingAttrChanged","contentAttrChanged","isNestedTarget","baseAssertion","contentFinalChanged","mutationObserver","observe","attributeOldValue","attributeFilter","subtree","childList","characterData","disconnect","takeRecords","pluginModules","staticPluginModuleInstances","addPlugins","addedPlugin","plugin","registerPluginModuleInstances","staticObj","instanceInfo","_plugin$name","osStatic","static","instance","instanceObj","instancePluginMap","ctor","getStaticPluginModuleInstance","pluginModuleName","_extends","module","assign","exports","__esModule","optionsTemplateTypes","string","object","function","null","validateRecursive","template","doWriteErrors","propPath","validatedOptions","optionsCopy","optionsValue","templateValue","templateIsComplex","propPrefix","_validateRecursive","validated","foreign","isValid","errorEnumStrings","errorPossibleTypes","optionsValueType","templateValueArr","currTemplateType","typeString","isEnumString","enumStringSplit","possibility","console","warn","validateOptions","optionsValidationPluginModuleName","_static","numberAllowedValues","oTypes","booleanAllowedValues","arrayNullValues","overflowAllowedValues","scrollbarsVisibilityAllowedValues","scrollbarsAutoHideAllowedValues","scrollbarsClickScrollAllowedValues","optionsTemplate","_validateOptions","sizeObserverPluginName","SizeObserverPlugin","listenerElement","onSizeChangedCallback","observeAppearChange","_setStyles","scrollAmount","scrollEventName","observerElementChildren","observerElementChildrenRoot","shrinkElement","expandElement","expandElementChild","cacheSize","currSize","isDirty","rAFId","reset","onResized","appear","onScroll","scrollEvent","destroyFns","getShowNativeOverlaidScrollbars","checkOption","_checkOption","showNativeOverlaidScrollbarsOption","showNativeOverlaidScrollbarsChanged","overflowIsVisible","overflowBehavior","createViewportOverflowState","hasOverflow","getAxisOverflowStyle","axisBehavior","axisHasOverflow","perpendicularBehavior","perpendicularOverflow","behaviorStyle","axisOverflowVisible","perpendicularOverflowVisible","nonPerpendicularOverflow","nonOverflow","_overflowStyle","_overflowScroll","scrollbarsHidingPluginName","ScrollbarsHidingPlugin","_viewportArrangement","structureSetupElements","structureSetupState","observersSetupState","checkOptions","_viewportIsTarget","_viewport","doViewportArrange","_getShowNativeOverlai","readViewportOverflowState","getStatePerAxis","styleKey","overflowStyle","overflowScroll","_getStatePerAxis","xOverflowStyle","xOverflowScroll","_getStatePerAxis2","yOverflowStyle","yOverflowScroll","_getViewportOverflowHideOffset","viewportOverflowState","arrangeHideOffset","getHideOffsetPerAxis","isOverlaid","nativeScrollbarSize","nonScrollbarStylingHideOffset","scrollbarsHideOffset","scrollbarsHideOffsetArrange","_getHideOffsetPerAxis","xScrollbarsHideOffset","xScrollbarsHideOffsetArrange","_getHideOffsetPerAxis2","yScrollbarsHideOffset","yScrollbarsHideOffsetArrange","_scrollbarsHideOffset","_scrollbarsHideOffsetArrange","_hideNativeScrollbars","viewportArrange","_directionIsRTL","_assignDeep","viewportStyleObj","_getViewportOverflowH","arrangeX","arrangeY","hideOffsetX","hideOffsetY","_viewportPaddingStyle","horizontalMarginKey","viewportHorizontalPaddingKey","horizontalMarginValue","verticalMarginValue","horizontalPaddingValue","verticalPaddingValue","_arrangeViewport","viewportScrollSize","sizeFraction","_getViewportOverflowH2","viewportArrangeHorizontalPaddingKey","viewportArrangeHorizontalPaddingValue","viewportArrangeVerticalPaddingValue","paddingTop","fractionalContentWidth","fractionalContenHeight","arrangeSize","_undoViewportArrange","finalViewportOverflowState","viewportPaddingStyle","_getViewportOverflowH3","finalPaddingStyle","assignProps","prevStyle","addArrange","clickScrollPluginModuleName","ClickScrollPlugin","moveHandleRelative","targetOffset","handleLength","onClickScrollCompleted","stopped","stopPressAnimation","linearScrollMs","easedScrollMs","_selfClearTimeout","setPressAnimationTimeout","clearPressAnimationTimeout","targetOffsetSign","handleLengthWithTargetSign","handleLengthWithTargetSignHalf","easedEndPressAnimation","linearPressAnimation","linearFrom","msFactor","completed","stopClickAnimation","clickAnimationProgress","clickAnimationCompleted","remainingScrollDistance","continueWithPress","remainingLinearScrollDistance","linearBridge","stopClick","createSizeObserver","_appear","sizeObserverPlugin","updateResizeObserverContentRectCache","baseElements","sizeObserver","onSizeChangedCallbackProxy","sizeChangedContext","isResizeObserverCall","ResizeObserverEntry","skip","_updateResizeObserver","contentRect","currRContentRect","_sizeChanged","resizeObserverInstance","pop","_sizeObserverPlugin","pluginAppearCallback","pluginDestroyFns","createTrinsicObserver","onTrinsicChangedCallback","intersectionObserverInstance","isHeightIntrinsic","ioEntryOrSize","isIntersecting","intersectionRatio","trinsicObserver","updateHeightIntrinsicCache","triggerOnTrinsicChangedCallback","updateValue","heightIntrinsic","heightIntrinsicChanged","intersectionObserverCallback","root","onSizeChanged","newSize","createObserversSetup","getCurrentOption","onObserversUpdated","debounceTimeout","debounceMaxDelay","updateContentMutationObserver","destroyContentMutationObserver","prevDirectionIsRTL","hostSelector","viewportSelector","baseStyleChangingAttrs","_target","_host","_scrollOffsetElement","_content","_isBody","_viewportHasClass","_viewportAddRemoveClass","_removeScrollObscuringStyles","getDirectionIsRTL","state","_heightIntrinsic","scrollbarsHidingPlugin","viewportIsTargetBody","noClipping","isArranged","scrollOffset","revertScrollObscuringStyles","revertMeasuring","redoViewportArrange","viewportScroll","fractional","updateContentSizeCache","onObserversUpdatedDebounced","prev","prevObj","currObj","setDirection","updateHints","newDirectionIsRTL","_directionChanged","onTrinsicChanged","heightIntrinsicCache","_heightIntrinsicChanged","exclusiveSizeChange","updateFn","onContentMutation","contentChangedThroughEvent","_updateContentSizeCac","_contentMutation","onHostMutation","_hostMutation","constructTrinsicObserver","updateTrinsicObserver","constructSizeObserver","_createDOMObserver","constructHostMutationObserver","updateHostMutationObserver","viewportIsTargetResizeObserver","onWindowResizeDebounced","_updateContentSizeCac2","destroySizeObserver","destroyTrinsicObserver","destroyHostMutationObserver","removeResizeListener","_scrollbarSizeChanged","_takeRecords","_force","_checkOption2","_checkOption3","attributesChanged","_checkOption4","elementEventsChanged","_checkOption5","debounceValue","debounceChanged","contentMutationObserverChanged","ignoreMutationFromOptions","_createDOMObserver2","ignore","construct","maxWait","hostUpdateResult","trinsicUpdateResult","contentUpdateResult","createScrollbarsSetupElements","scrollbarsSetupEvents","cssCustomPropViewportPercent","cssCustomPropScrollPercent","cssCustomPropScrollDirection","defaultInitScrollbars","defaultInitScrollbarsSlot","_targetIsElm","scrollbarsInit","initScrollbarsSlot","horizontalScrollbars","verticalScrollbars","evaluatedScrollbarSlot","generalDynamicInitializationElement","initScrollTimeline","axis","timeline","_addScrollPercentAnimation","structure","_structure$_scrollbar","scrollPercentAnimation","_scrollbar","animate","scrollTimeline","getViewportPercent","_overflowAmount","_overflowEdge","getAxisValue","axisViewportSize","axisOverflowAmount","scrollbarStructureAddRemoveClass","scrollbarStructures","action","scrollbarStructure","scrollbarStyle","_elmStyle","scrollbarsAddRemoveClass","onlyHorizontal","singleAxis","runHorizontal","runVertical","refreshScrollbarsHandleLength","viewportPercent","createScrollbarStyleFn","axisViewportPercent","refreshScrollbarsHandleOffset","_scrollCoordinates","scrollPercent","axisScrollPercent","_ref4","refreshScrollbarsScrollCoordinates","defaultDirectionScroll","axisIsDefaultDirectionScrollCoordinates","_ref5","refreshScrollbarsScrollbarOffset","isDefaultDirectionScroll","styleScrollbarPosition","getTranslateValue","axisIsDefaultCoordinates","px","transform","generateScrollbarDOM","xyKey","scrollbarClassName","scrollbar","track","handle","_track","_handle","generateHorizontalScrollbarStructure","generateVerticalScrollbarStructure","appendElements","_refreshScrollbarsHandleLength","_refreshScrollbarsHandleOffset","_refreshScrollbarsScrollCoordinates","_refreshScrollbarsScrollbarOffset","_scrollbarsAddRemoveClass","_horizontal","_scrollbarStructures","_clone","_style","_vertical","createScrollbarsSetupEvents","scrollbarHandlePointerInteraction","_documentElm","wheelTimeout","clearWheelTimeout","_selfClearTimeout2","scrollSnapScrollTransitionTimeout","clearScrollSnapScrollTransitionTimeout","scrollOffsetElementScrollBy","coordinates","scrollBy","behavior","createInteractiveScrollEvents","releasePointerCaptureEvents","clientXYKey","widthHeightKey","leftTopKey","whKey","createRelativeHandleMove","mouseDownScroll","invertedScale","deltaMovement","_scrollElementTo","handleTrackDiff","scrollDeltaPercent","scrollDelta","pointerdownCleanupFns","pointerDownEvent","isDragScroll","pointerCaptureElement","scrollbarOptions","dragClickScrollOption","button","isPrimary","pointerType","continuePointerDown","instantClickScroll","shiftKey","getHandleRect","getTrackRect","getHandleOffset","handleRect","trackRect","axisScale","pointerDownOffset","handleCenter","relativeTrackPointerOffset","startOffset","releasePointerCapture","pointerUpEvent","pointerupCleanupFns","pointerId","nonAnimatedScroll","pointerMoveEvent","withoutSnapScrollOffset","withSnapScrollOffset","snapScrollDiff","setPointerCapture","animateClickScroll","stopClickScrollAnimation","wheelScrollBy","focusedElement","wheelEvent","deltaX","deltaY","deltaMode","createScrollbarsSetup","mouseInHost","autoHideIsMove","autoHideIsLeave","autoHideIsNever","prevTheme","instanceAutoHideSuspendScrollDestroyFn","instanceAutoHideDelay","isHoverablePointerType","requestScrollAnimationFrame","cancelScrollAnimationFrame","autoHideInstantInteractionTimeout","clearAutoHideInstantInteractionTimeout","_selfClearTimeout3","autoHideSuspendTimeout","clearAutoHideSuspendTimeout","_selfClearTimeout4","auotHideTimeout","clearAutoHideTimeout","_createScrollbarsSetu","manageScrollbarsAutoHideInstantInteraction","_scrollEventElement","manageScrollbarsAutoHide","removeAutoHide","delayless","hide","manageAutoHideSuspension","onHostMouseEnter","_observersUpdateHints","_structureUpdateHints","_overflowEdgeChanged","_overflowAmountChanged","_overflowStyleChanged","_scrollCoordinatesChanged","_hasOverflow","themeChanged","visibilityChanged","autoHideChanged","_checkOption6","autoHideSuspendChanged","_checkOption7","_checkOption8","dragScrollChanged","_checkOption9","clickScrollChanged","_checkOption10","overflowChanged","trulyAppeared","updateScrollbars","updateVisibility","setScrollbarVisibility","isVisible","xVisible","yVisible","hasCorner","createStructureSetupElements","defaultInitElements","defaultPaddingInitialization","defaultViewportInitialization","defaultContentInitialization","targetIsElm","targetStructureInitialization","initElements","paddingInitialization","viewportInitialization","contentInitialization","targetElement","ownerDocument","docElement","documentElement","getDocumentWindow","defaultView","generalStaticInitializationElement","createNewDiv","generateViewportElement","generateContentElement","elementHasOverflow","offsetSize","scrollSize","overflowX","overflowY","possibleViewportElement","viewportIsTarget","possibleContentElement","viewportIsContent","viewportElement","hostElement","paddingElement","contentElement","generatedElements","elementIsGenerated","originalNonBodyScrollOffsetElement","scrollOffsetElement","scrollEventElement","evaluatedTargetObj","_padding","_originalScrollOffsetElement","_windowElm","viewportAttributeClassName","targetContents","contentSlot","docWnd","initActiveElm","unwrap","prepareWrapUnwrapFocus","tabIndexStr","originalViewportTabIndex","undoInitWrapUndwrapFocus","destroyActiveElm","viewportIsGenerated","destroyFocusElement","undoDestroyWrapUndwrapFocus","createTrinsicUpdateSegment","_observersState","createPaddingUpdateSegment","updatePaddingCache","currentPaddingCache","_currentPaddingCache","paddingChanged","paddingAbsoluteChanged","contentMutation","_updatePaddingCache","paddingStyleChanged","_paddingStyle","_viewportStyle","paddingRelative","paddingHorizontal","paddingVertical","paddingStyle","viewportStyle","_paddingAbsolute","_paddingStyleChanged","createOverflowUpdateSegment","max0","flowDirectionCanBeNonDefaultMap","display","direction","directionStyle","flexDirection","flexDirectionStyle","endsWith","writingMode","writingModeStyle","flowDirectionStyleArr","whCacheOptions","partialXYOptions","setMeasuringMode","active","getMeasuredScrollCoordinates","flowDirectionStyles","flowDirectionCanBeNonDefault","some","styleName","styleValue","originalScrollOffset","removeNoContent","removeScrollBlock","scrollEventScrollOffset","isTrusted","tmp","getOverflowAmount","viewportClientSize","tollerance","updateSizeFraction","getCurrentSizeFraction","_createCache2","updateViewportScrollSizeCache","getCurrentViewportScrollSizeCache","_createCache3","updateOverflowAmountCache","getCurrentOverflowAmountCache","_createCache4","updateHasOverflowCache","_createCache5","updateOverflowEdge","getCurrentOverflowEdgeCache","_createCache6","updateOverflowStyleCache","_createCache7","currVal","newValu","updateFlowDirectionStyles","_createCache8","updateMeasuredScrollCoordinates","getCurrentMeasuredScrollCoordinates","createViewportOverflowStyleClassName","prefix","setViewportOverflowStyle","viewportOverflowStyle","createAllOverflowStyleClassNames","allOverflowStyleClassNames","scrollbarsHidingPluginViewportArrangement","overflowXVisible","overflowYVisible","viewportChanged","sizeFractionCache","viewportScrollSizeCache","overflowAmuntCache","overflowEdgeCache","_sizeFractionCache","_viewportScrollSizeCa","windowInnerSize","overflowAmountScrollSize","overflowAmountClientSize","_overflowEdgeCache","overflowEdge","overflowEdgeChanged","_overflowAmuntCache","overflowAmountChanged","_viewportScrollSizeCa2","viewportScrollSizeChanged","_sizeFractionCache2","sizeFractionChanged","_updateHasOverflowCac","hasOverflowChanged","removeClipping","adjustViewportStyle","_updateOverflowStyleC","overflowStyleChanged","_updateFlowDirectionS","flowDirectionStylesChanged","adjustMeasuredScrollCoordinates","_ref6","scrollCoordinates","scrollCoordinatesChanged","_scrolled","createStructureSetup","_createStructureSetup","appendStructureElements","canceled","updateSegments","updateInfo","adjustScrollOffset","updateSegment","createSetups","isDestroyed","onUpdated","cacheAndOptionsInitialized","structureSetupCreate","structureSetupUpdate","structureSetupCanceled","_createObserversSetup","observersUpdateHints","observersSetupCreate","observersSetupUpdate","scrollbarsSetupCreate","scrollbarsSetupUpdate","scrollbarsSetupElements","updateHintsAreTruthy","hints","observerUpdateHints","rawChangedOptions","_changedOptions","rawForce","_cloneScrollbar","baseUpdateInfoObj","observersHints","structureHints","truthyObserversHints","truthyStructureHints","initialScroll","_observersSetupState","_structureSetupState","_structureSetupElements","_scrollbarsSetupElements","OverlayScrollbars","eventListeners","targetIsElement","instanceTarget","potentialInstance","instancePluginModuleInstances","newOptionsWithoutUndefined","pluginValidate","currentOptions","addPluginEvent","removePluginEvents","triggerPluginEvent","_createEventListenerH2","addInstanceEvent","removeInstanceEvents","triggerInstanceEvent","_createSetups","sizeChanged","directionChanged","hostMutation","setupsConstruct","setupsUpdate","setupsState","setupsElements","setupsCanceled","pure","base","on","off","_setupsState","directionRTL","_setupsElements$_stru","_setupsElements$_scro","translateScrollbarStructure","translateScrollbarsSetupElement","scrollbarsSetupElement","translatedStructure","scrollbarHorizontal","scrollbarVertical","plugins","isArr","pluginsToAdd","valid","hasElmsFn","_getEnvironment2","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","setDefaultInitialization","setDefaultOptions"],"mappings":"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","x_google_ignoreList":[32]}